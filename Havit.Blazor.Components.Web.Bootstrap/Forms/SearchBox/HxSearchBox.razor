@namespace Havit.Blazor.Components.Web.Bootstrap
@using Havit.Blazor.Components.Web.Bootstrap.Internal
@typeparam TItem

<div class="@CssClassEffective">
    <HxDropdown AutoClose="DropdownAutoClose.Outside">
		<HxDropdownToggleElement id="@dropdownToggleElementId" OnShown="() => SetDropdownMenuVisibility(true)" OnHidden="() => SetDropdownMenuVisibility(false)" ElementName="div">
			<div class="position-relative" @onmouseup="EnsureDropdownMenuVisibility" @onfocusin="MakeDropdownMenuVisible">
				<form @onsubmit="HandleFreetextSelected">
					<HxInputText
						Value="@Freetext"
                        ValueChanged="HandleFreetextValueChanged"
                        ValueExpression="() => this.Freetext"
						InputMode="InputMode.Search"
						BindEvent="BindEvent.OnInput"
						Enabled="Enabled"
						Placeholder="@Placeholder"
						Label="@Label"
						LabelType="LabelType"
						CssClass="@CssClassHelper.Combine(InputCssClass, "mb-0")" />

					@if (!string.IsNullOrEmpty(Freetext) && (ClearIconEffective is not null))
					{
						<div role="button" class="input-icon input-icon-end" @onclick="ClearInputAsync">
							<HxIcon Icon="ClearIconEffective" />
						</div>
					}
					else if (SearchIconEffective is not null)
					{
						<div class="input-icon input-icon-end">
							<HxIcon Icon="SearchIconEffective" />
						</div>
					}
				</form>
			</div>
		</HxDropdownToggleElement>

		<HxDropdownMenu>
			@if ((searchResults.Count > 0) && (Freetext.Length >= MinimumLengthEffective))
			{
				@foreach (var item in searchResults)
				{
					string title = ItemTitleSelector?.Invoke(item) ?? null;
					string subtitle = ItemSubtitleSelector?.Invoke(item) ?? null;
					IconBase icon = ItemIconSelector?.Invoke(item) ?? null;

					<button class="@CssClassHelper.Combine("dropdown-item", ItemCssClassEffective)" @onclick="() => HandleItemSelected(item)">
						@if (ItemTemplate is null)
						{
							<HxSearchBoxItem Title="@title" Subtitle="@subtitle" Icon="@icon" />
						}
						else
						{
							@ItemTemplate(item)
						}
					</button>
				}
			}
			else if ((Freetext is not null) && (Freetext.Length >= MinimumLengthEffective))
			{
				@EmptyTemplate
			}
			else
			{
				@EmptyInputTemplate
			}

			@if ((Freetext is not null) && (Freetext.Length >= MinimumLengthEffective) && ShowFreetextItem)
			{
				<button class="@CssClassHelper.Combine("dropdown-item", ItemCssClassEffective)" @onclick="HandleFreetextSelected">
					@if (FreetextItemTemplate is null)
					{
						<HxSearchBoxItem Title="@Freetext" Icon="@SearchIconEffective" />
					}
					else
					{
						@FreetextItemTemplate(Freetext)
					}
				</button>
			}
		</HxDropdownMenu>
	</HxDropdown>
</div>
