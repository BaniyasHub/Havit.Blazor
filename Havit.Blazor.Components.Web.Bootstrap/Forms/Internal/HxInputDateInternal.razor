@namespace Havit.Blazor.Components.Web.Bootstrap.Internal
@typeparam TValue
@inherits Microsoft.AspNetCore.Components.Forms.InputBase<TValue>

@if (FieldIdentifier.Model != null)
{
	<div class="@CssClassHelper.Combine(
					 "hx-input-date input-group dropdown",
					 ((IInputWithSize)this).GetInputGroupSizeCssClass(),
					 (this.CalendarIconEffective is not null) ? "hx-input-date-has-calendar-icon" : null,
					 (LabelTypeEffective == LabelType.Floating) ? "form-floating" : null,
					 (ShowPredefinedDatesEffective && (PredefinedDatesEffective?.Any() ?? false)) ? "hx-input-date-predefined-dates" : null)">

	@*Input must not be rendered when bootstrap dropdown is opened. Therefore we add is-invalid class via IJSRuntime. *@
	<input @ref="dateInputElement" type="text" id="@InputId" class="@CssClassHelper.Combine(InputCssClass, ((IInputWithSize)this).GetInputSizeCssClass())" value="@CurrentValueAsString" @onchange="HandleValueChangedAsync" placeholder="@Placeholder" data-bs-toggle="dropdown" data-bs-auto-close="outside" disabled="@(!EnabledEffective)" />
	@if (LabelTypeEffective == Havit.Blazor.Components.Web.Bootstrap.LabelType.Floating)
	{
		<HxFormValueComponentRenderer_Label FormValueComponent="@FormValueComponent" />
	}
	@if (EnabledEffective)
	{
		<div class="dropdown-menu hx-input-date-dropdown">
			<div class="hx-input-date-calendar">
				<HxCalendar Value="@GetDateTimeFromValue(Value)" ValueChanged="HandleCalendarValueChangedAsync" MinDate="@MinDateEffective" MaxDate="@MaxDateEffective" DateCustomizationProvider="GetCalendarDateCustomization" />
			</div>
			@if (ShowCalendarButtonsEffective)
			{
				<div class="hx-input-date-dropdown-buttons">
					<HxButton Text="@StringLocalizerFactory.GetLocalizedValue("Clear", typeof(HxInputDate))" Color="ThemeColor.Link" Size="ButtonSize.Small" OnClick="HandleClearClickAsync" />
					<HxButton Text="@StringLocalizerFactory.GetLocalizedValue("OK", typeof(HxInputDate))" Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="HandleOKClickAsync" />
				</div>
			}
		</div>
	}

	@if (CalendarIconEffective is not null)
	{
		<div @ref="iconWrapperElement" class="hx-input-date-icon">
			<HxIcon Icon="CalendarIconEffective" />
		</div>
	}

	@if (ShowPredefinedDatesEffective && (this.PredefinedDatesEffective != null) && PredefinedDatesEffective.Any())
	{
		<button class="btn btn-light" type="button" data-bs-toggle="dropdown" disabled="@(!EnabledEffective)" tabindex="-1">
			<HxIcon Icon="@BootstrapIcon.ThreeDotsVertical" />
		</button>
		@if (EnabledEffective)
		{
			<ul class="dropdown-menu dropdown-menu-end">
				@foreach (var item in PredefinedDatesEffective)
				{
					<li><span class="dropdown-item" role="button" @onclick="() => HandleCustomDateClick(item.Date)" @onclick:stopPropagation>@StringLocalizerFactory.GetLocalizedValue(item.Label, item.ResourceType)</span></li>
				}
			</ul>
		}
	}
</div>
	}