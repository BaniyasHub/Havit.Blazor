@namespace Havit.Blazor.Components.Web.Bootstrap.Internal
@inherits Microsoft.AspNetCore.Components.Forms.InputBase<DateTimeRange>

@if ((FieldIdentifier.Model != null) && (fromFieldIdentifier.Model != null) && (toFieldIdentifier.Model != null))
{
	<div class="@CssClassHelper.Combine("hx-input-date-range input-group dropdown", CustomDateRanges.Any() ? "custom-date-ranges" : null)">
		@*Input must not be rendered when bootstrap dropdown is opened. Therefore we add is-invalid class via IJSRuntime. *@
		<input @ref="fromInputElement" type="text" id="@FromInputId" class="@CssClassHelper.Combine("form-control", InputCssClass, ((IInputWithSize)this).GetInputSizeCssClass())" value="@FormatDate(Value.StartDate)" placeholder="@StringLocalizer["From"]" @onchange="HandleFromChangedAsync" @onfocus="HandleFromFocusAsync" data-bs-toggle="dropdown" data-bs-auto-close="outside" disabled="@(!EnabledEffective)" />

		@if (EnabledEffective)
		{
			<div class="dropdown-menu p-3">
				<div class="mb-2">
					<HxCalendar Value="@Value.StartDate" ValueChanged="HandleFromCalendarValueChangedAsync" />
				</div>
				@if (ShowCalendarButtons)
				{
					<div class="d-flex justify-content-between">
						<HxButton Text="@StringLocalizer["Clear"]" Color="ThemeColor.Link" Size="ButtonSize.Small" OnClick="HandleFromClearClickAsync" />
						<HxButton Text="@StringLocalizer["OK"]" Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="HandleFromOKClickAsync" />
					</div>
				}
			</div>
		}

		@*Input must not be rendered when bootstrap dropdown is opened. Therefore we add is-invalid class via IJSRuntime. *@
		<input @ref="toInputElement" type="text" class="@CssClassHelper.Combine("form-control", InputCssClass, ((IInputWithSize)this).GetInputSizeCssClass())" value="@FormatDate(Value.EndDate)" placeholder="@StringLocalizer["To"]" @onchange="HandleToChangedAsync" @onfocus="HandleToFocusAsync" data-bs-toggle="dropdown" data-bs-auto-close="outside" disabled="@(!EnabledEffective)" />
		@if (EnabledEffective)
		{
			<div class="dropdown-menu p-3">
				<div class="mb-2">
					<HxCalendar Value="@Value.EndDate" ValueChanged="HandleToCalendarValueChanged" />
				</div>
				@if (ShowCalendarButtons)
				{

					<div class="d-flex justify-content-between">
						<HxButton Text="@StringLocalizer["Clear"]" Color="ThemeColor.Link" Size="ButtonSize.Small" OnClick="HandleToClearClickAsync" />
						<HxButton Text="@StringLocalizer["OK"]" Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="HandleToOKClickAsync" />
					</div>
				}
			</div>
		}

		@if (ShowValidationMessage)
		{
			<HxValidationMessage TValue="DateTimeRange" ForFieldNames="@validationFieldNames" />
		}

		@if ((CustomDateRanges != null) && CustomDateRanges.Any())
		{
			<button class="btn btn-light" type="button" data-bs-toggle="dropdown" disabled="@(!EnabledEffective)" tabindex="-1">
				<HxIcon Icon="@BootstrapIcon.ThreeDotsVertical" />
			</button>
			@if (EnabledEffective)
			{
				<ul class="dropdown-menu dropdown-menu-end">
					@foreach (DateRangeItem item in CustomDateRanges)
					{
						<li><span class="dropdown-item" role="button" @onclick="() => HandleDateRangeClick(item.DateRange)" @onclick:stopPropagation>@item.Label</span></li>
					}
				</ul>
			}
		}
	</div>
}