@namespace Havit.Blazor.Components.Web.Bootstrap.Internal
@inherits Microsoft.AspNetCore.Components.Forms.InputBase<DateTimeRange>

@if ((FieldIdentifier.Model != null) && (fromFieldIdentifier.Model != null) && (toFieldIdentifier.Model != null))
{
    <div class="@CssClassHelper.Combine("hx-input-date-range input-group dropdown", (ShowPredefinedDateRangesEffective && (PredefinedDateRangesEffective?.Any() ?? false)) ? "hx-input-date-range-predefined-ranges" : null)">

        @*Input must not be rendered when bootstrap dropdown is opened. Therefore we add is-invalid class via IJSRuntime. *@
        <input @ref="fromInputElement"
           type="text"
           id="@FromInputId"
           class="@CssClassHelper.Combine(this.InputCssClass, ((IInputWithSize)this).GetInputSizeCssClass())"
           value="@FormatDate(Value.StartDate)"
           placeholder="@StringLocalizerFactory.GetLocalizedValue("From", typeof(HxInputDateRange))"
           @onchange="HandleFromChangedAsync"
           @onfocus="HandleFromFocusAsync"
           data-bs-toggle="dropdown"
           data-bs-auto-close="outside"
           disabled="@(!EnabledEffective)"
           @attributes="this.AdditionalAttributes" />

        @if (EnabledEffective)
        {
            <div class="hx-input-date-range-dropdown dropdown-menu">
                <div class="hx-input-date-range-calendar">
                    <HxCalendar Value="@Value.StartDate" ValueChanged="HandleFromCalendarValueChangedAsync" MinDate="@MinDateEffective" MaxDate="@MaxDateEffective" DateCustomizationProvider="GetCalendarDateCustomizationFrom" />
                </div>
                @if (ShowCalendarButtonsEffective)
                {
                    <div class="hx-input-date-range-buttons">
                        <HxButton Text="@StringLocalizerFactory.GetLocalizedValue("Clear", typeof(HxInputDateRange))" Color="ThemeColor.Link" Size="ButtonSize.Small" OnClick="HandleFromClearClickAsync" />
                        <HxButton Text="@StringLocalizerFactory.GetLocalizedValue("OK", typeof(HxInputDateRange))" Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="HandleFromOKClickAsync" />
                    </div>
                }
            </div>
        }

        @*Input must not be rendered when bootstrap dropdown is opened. Therefore we add is-invalid class via IJSRuntime. *@
        <input @ref="toInputElement"
           type="text"
           class="@CssClassHelper.Combine(this.InputCssClass, ((IInputWithSize)this).GetInputSizeCssClass())"
           value="@FormatDate(Value.EndDate)"
           placeholder="@StringLocalizerFactory.GetLocalizedValue("To", typeof(HxInputDateRange))"
           @onchange="HandleToChangedAsync"
           @onfocus="HandleToFocusAsync"
           data-bs-toggle="dropdown"
           data-bs-auto-close="outside"
           disabled="@(!EnabledEffective)"
           @attributes="this.AdditionalAttributes" />

        @if (EnabledEffective)
        {
            <div class="hx-input-date-range-dropdown dropdown-menu">
                <div class="hx-input-date-range-calendar">
                    <HxCalendar Value="@Value.EndDate" ValueChanged="HandleToCalendarValueChanged" MinDate="@MinDateEffective" MaxDate="@MaxDateEffective" DateCustomizationProvider="GetCalendarDateCustomizationTo" />
                </div>
                @if (ShowCalendarButtonsEffective)
                {
                    <div class="hx-input-date-range-buttons">
                        <HxButton Text="@StringLocalizerFactory.GetLocalizedValue("Clear", typeof(HxInputDateRange))" Color="ThemeColor.Link" Size="ButtonSize.Small" OnClick="HandleToClearClickAsync" />
                        <HxButton Text="@StringLocalizerFactory.GetLocalizedValue("OK", typeof(HxInputDateRange))" Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="HandleToOKClickAsync" />
                    </div>
                }
            </div>
        }

        @if (ShowValidationMessage)
        {
            <HxValidationMessage TValue="DateTimeRange" ForFieldNames="@validationFieldNames" />
        }

        @if (ShowPredefinedDateRangesEffective && (PredefinedDateRangesEffective != null) && PredefinedDateRangesEffective.Any())
        {
            <button class="btn btn-light" type="button" data-bs-toggle="dropdown" disabled="@(!EnabledEffective)" tabindex="-1">
                <HxIcon Icon="@BootstrapIcon.ThreeDotsVertical" />
            </button>
            @if (EnabledEffective)
            {
                <ul class="dropdown-menu dropdown-menu-end">
                    @foreach (var item in PredefinedDateRangesEffective)
                    {
                        <li><span class="dropdown-item" role="button" @onclick="() => HandleDateRangeClick(item.DateRange)" @onclick:stopPropagation>@StringLocalizerFactory.GetLocalizedValue(item.Label, item.ResourceType)</span></li>
                    }
                </ul>
            }
        }
    </div>
}