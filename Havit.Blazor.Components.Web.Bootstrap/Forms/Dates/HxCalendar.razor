@namespace Havit.Blazor.Components.Web.Bootstrap

@{
	var renderData = GetRenderData();
}

<div class="calendar">
	<div class="navigation">
		<div role="button" @onclick="HandlePreviousMonthClickAsync" @onclick:stopPropagation>
			<HxIcon Icon="@BootstrapIcon.ChevronLeft"/>
		</div>

		<div class="row gx-1">
			<div class="col-auto">
				<select class="form-select form-select-sm" @onchange="HandleYearChangeAsync" @onclick:stopPropagation>
					@foreach (int year in renderData.Years)
					{
						<option value="@year" selected="@(year == DisplayMonth.Year)">@year.ToString("G")</option>
						/* not "N" - we do not want thousands separator */
					}
				</select>
			</div>
			<div class="col-auto">
				<select class="form-select form-select-sm" @onchange="HandleMonthChangeAsync" @onclick:stopPropagation>
					@for (int monthIndex = 0; monthIndex < renderData.Months.Count; monthIndex++)
					{
						<option value="@monthIndex" selected="@((monthIndex + 1) == DisplayMonth.Month)">@renderData.Months[monthIndex]</option>
					}
				</select>
			</div>
		</div>

		<div role="button" @onclick="HandleNextMonthClickAsync" @onclick:stopPropagation>
			<HxIcon Icon="@BootstrapIcon.ChevronRight"/>
		</div>
	</div>

	<table>
		<tr class="day-names fw-bold">
			@foreach (string dayOfWeek in renderData.DaysOfWeek)
			{
				<td>@dayOfWeek</td>
			}
		</tr>
		@foreach (WeekData week in renderData.Weeks)
		{
			<tr class="week">
				@foreach (DayData day in week.Days)
				{
					if (day.ClickEnabled)
					{
						<td class="@day.CssClass" role="button" @onclick="async () => await HandleDayClickAsync(day)" @onclick:stopPropagation>@day.DayInMonth</td>
					}
					else
					{
						<td class="@day.CssClass">@day.DayInMonth</td>
					}
				}
			</tr>
		}
	</table>
</div>