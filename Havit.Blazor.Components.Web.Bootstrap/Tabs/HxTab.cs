using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Havit.Blazor.Components.Web.Infrastructure;
using Havit.Diagnostics.Contracts;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.RenderTree;

namespace Havit.Blazor.Components.Web.Bootstrap
{
	/// <summary>
	/// Tab in tab panel.
	/// </summary>
	public class HxTab : ComponentBase, IRenderNotificationComponent, ICascadeEnabledComponent, IDisposable
	{
		/// <summary>
		/// Cascading parameter to register the tab.
		/// </summary>
		[CascadingParameter(Name = HxTabPanel.TabsRegistrationCascadingValueName)]
		protected CollectionRegistration<HxTab> TabsRegistration { get; set; }

		/// <summary>
		/// ID of the tab (<see cref="HxTabPanel.ActiveTabId"/>).
		/// Autogenerated GUID if not set.
		/// </summary>
		[Parameter] public string Id { get; set; } = Guid.NewGuid().ToString("N");

		/// <summary>
		/// Tab title.
		/// </summary>
		[Parameter] public string Title { get; set; }

		/// <summary>
		/// Tab title template.
		/// </summary>
		[Parameter] public RenderFragment TitleTemplate { get; set; }

		/// <summary>
		/// Content of the tab.
		/// </summary>
		[Parameter] public RenderFragment Content { get; set; }

		/// <summary>
		/// True for visible tab. Set false when tab should not be visible.
		/// </summary>
		[Parameter] public bool Visible { get; set; } = true;

		/// <inheritdoc />
		[CascadingParameter] public FormState FormState { get; set; }

		/// <inheritdoc />
		[Parameter] public bool? Enabled { get; set; }

		RenderedEventHandler IRenderNotificationComponent.Rendered { get; set; }

		/// <inheritdoc />
		protected override async Task OnInitializedAsync()
		{
			await base.OnInitializedAsync();

			Contract.Assert(TabsRegistration != null, $"{nameof(HxTab)} invalid usage. Must be used in a {nameof(HxTabPanel)}.");
			TabsRegistration.Register(this);
		}

		/// <inheritdoc />
		protected override async Task OnAfterRenderAsync(bool firstRender)
		{
			await base.OnAfterRenderAsync(firstRender);

			((IRenderNotificationComponent)this).Rendered?.Invoke(this, firstRender);
		}

		/// <inheritdoc />
		public virtual void Dispose()
		{
			TabsRegistration.Unregister(this);
		}
	}
}
