@namespace Havit.Blazor.Components.Web.Bootstrap

<div class="calendar">
	@if (renderData != null)
	{
		<div class="navigation mb-3">
			<div class="input-group mx-1">
				<HxButton Icon="@BootstrapIcon.ChevronLeft" Color="ThemeColor.Light" OnClickStopPropagation="true" OnClick="HandlePreviousMonthClickAsync" />
				<select class="form-select form-select-sm" value="@(DisplayMonth.Month - 1)" @onchange="HandleMonthChangeAsync" @onclick:stopPropagation>
					@for (int monthIndex = 0; monthIndex < renderData.Months.Count; monthIndex++)
					{
						<option value="@monthIndex">@renderData.Months[monthIndex]</option>
					}
				</select>
				<select class="form-select form-select-sm" value="@DisplayMonth.Year" @onchange="HandleYearChangeAsync" @onclick:stopPropagation>
					@foreach (int year in renderData.Years)
					{
						/* not "N" - we do not want thousands separator */
						<option value="@year">@year.ToString()</option>
					}
				</select>
				<HxButton Icon="@BootstrapIcon.ChevronRight" Color="ThemeColor.Light" OnClickStopPropagation="true" OnClick="HandleNextMonthClickAsync" />
			</div>
		</div>

		<table>
			<tr class="day-names fw-bold">
				@foreach (string dayOfWeek in renderData.DaysOfWeek)
				{
					<td>@dayOfWeek</td>
				}
			</tr>
			@foreach (WeekData week in renderData.Weeks)
			{
				<tr class="week">
					@foreach (DayData day in week.Days)
					{
						
							@if (day.ClickEnabled)
							{
								<td role="button" @onclick="async () => await HandleDayClickAsync(day)" @onclick:stopPropagation>
									<div class="@day.CssClass">@day.DayInMonth</div>
								</td>
							}
							else
							{
								<td>
									<div class="@day.CssClass">@day.DayInMonth</div>
								</td>
							}
						
					}
				</tr>
			}
		</table>
	}
</div>