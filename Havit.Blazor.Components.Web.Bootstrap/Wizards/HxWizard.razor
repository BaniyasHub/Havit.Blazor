@namespace Havit.Blazor.Components.Web.Bootstrap
<CascadingValue Value="stepsRegistration" Name="@StepsRegistrationCascadingValueName" IsFixed="true">
	@ChildContent
</CascadingValue>

<div class="hx-wizard hx-wizard-vertical">

	@if (ShowNavigator)
	{
		@* TODO: wizard steps navigator *@
		<div class="hx-wizard-navigator">
            <div class="progress">
                @* TODO *@
                @* Nastavovat width/height podle verical/horizontal varianty *@
                <div class="progress-bar" role="progressbar" style="width: 50%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
            @{int i = 1;}
			@foreach (HxWizardStep step in steps)
			{
                @* TODO *@
                @* Nastavovat left/top podle vertical/horizontal varianty *@
                <div class="hx-wizard-step translate-middle" style="left:50%">
                    <div class="position-relative">
                        <HxButton CssClass="rounded-pill hx-wizard-step-button" Text="@(i.ToString())" Color="@(IsActiveStep(step) ? ThemeColor.Secondary : ThemeColor.Secondary)" Size="ButtonSize.Small" />
                        <div class="hx-wizard-step-name translate-middle-x">@step.Name</div>
                    </div>
                </div>
                i++;
			}
		</div>
	}

	@foreach (HxWizardStep step in steps)
	{
		@if (IsActiveStep(step))    
		{
			<UpdatedContentRenderer Component="@step">
				<div>
					<div class="hx-wizard-step-content">
						@step.ChildContent
					</div>
				</div>
				<div class="d-grid gap-2 d-md-block">
					@if (CanGoBack())
					{
						<HxButton Text="Back" Color="ThemeColor.Secondary" OnClick="GoBackClick" />@* TODO: Localization *@
					}

					@if (CanGoNext())
					{
						<HxButton Text="Next" Color="ThemeColor.Primary" OnClick="GoNextClick" />@* TODO: Localization *@
					}
				</div>
			</UpdatedContentRenderer>
		}
	}
</div>
