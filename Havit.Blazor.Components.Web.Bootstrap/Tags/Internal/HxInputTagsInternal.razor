@namespace Havit.Blazor.Components.Web.Bootstrap.Internal

<div class="@CssClassHelper.Combine("hx-input-tags", GetFormControlCssClasses(), "d-flex position-relative flex-grow-1 flex-wrap align-items-center", this.CssClass)"
	 @onclick="async () => await autosuggestInput.FocusAsync()"
	 @onclick:stopPropagation>

	@foreach (string tag in ValueEffective)
	{
		<HxBadge Color="ThemeColor.Light"
				 TextColor="ThemeColor.Dark"
				 CssClass="hx-tag">
			@tag
			<span class="d-inline-flex align-items-center ms-1" @onclick="async() => await HandleRemoveClickAsync(tag)" @onclick:stopPropagation="true" role="button">
				<HxIcon Icon="BootstrapIcon.X" />
			</span>
		</HxBadge>
	}

	@if (ShowAddButtonEffective && !currentlyFocused && !isDropdownOpened)
	{
		<HxBadge Color="ThemeColor.Light"
				 TextColor="ThemeColor.Dark"
				 CssClass="hx-tag hx-tag-add-button"
				 role="button">
			<span class="@CssClassHelper.Combine("d-inline-flex align-items-center", String.IsNullOrEmpty(AddButtonText) ? null : "me-1")"role="button">@* We don't need to catch onClick here as it gets propagated to parent div*@
				<HxIcon Icon="BootstrapIcon.Plus" />
			</span>
			@if (!this.ValueEffective.Any() && !String.IsNullOrEmpty(AddButtonText))
			{
				@AddButtonText
			}
		</HxBadge>
	}

	<div id="@dropdownId" class="@CssClassHelper.Combine("dropdown", (LabelTypeEffective == Havit.Blazor.Components.Web.Bootstrap.LabelType.Floating) ? "form-floating" : null)">
		<HxInputTagsAutosuggestInput @ref="autosuggestInput"
									 InputId="@InputId"
									 EnabledEffective="@EnabledEffective"
									 Value="@userInput"
									 OnInputInput="HandleInputInput"
									 OnInputFocus="HandleInputFocus"
									 OnInputBlur="HandleInputBlur"
									 OnInputMouseDown="HandleInputMouseDown"
									 OnInputKeyDown="HandleInputKeyDown"
									 Placeholder="@(ValueEffective.Any() ? null : Placeholder)"
									 CssClass="@InputCssClass"
									 Offset="@InputOffset" />
		@if (dataProviderInProgress)
		{
			<HxSpinner Type="SpinnerType.Border" Size="SpinnerSize.Small" />
		}
		<HxAutosuggestItems TItem="string" Items="@suggestions" OnItemClick="HandleItemClick">
			<ItemTemplate>
				@context
			</ItemTemplate>
		</HxAutosuggestItems>
	</div>

</div>