@namespace Havit.Blazor.Components.Web.Bootstrap
@typeparam TItem

<CascadingValue Value="@columnsListRegistration" Name="@ColumnsRegistrationCascadingValueName" IsFixed="true">
	@*Aby se dostaly komponenty do kolekcí, musíme je dostat do renderování této komponenty. Chceme však, aby komponenty nic nevyrenderovaly. *@
	@if (MultiSelectionEnabled)
	{
		bool allDataItemsSelected = (paginationDataItemsToRender != null) && (SelectedDataItems != null) && (SelectedDataItems.Count > 0) && (paginationDataItemsToRender.Count == SelectedDataItems.Count);
		<MultiSelectGridColumn TItem="TItem"
							   AllDataItemsSelected="@allDataItemsSelected"
							   SelectedDataItems="@SelectedDataItems"
							   OnSelectDataItemClicked="HandleMultiSelectSelectDataItemClicked"
							   OnUnselectDataItemClicked="HandleMultiSelectUnselectDataItemClicked"
							   OnSelectAllClicked="HandleMultiSelectSelectAllClicked"
							   OnSelectNoneClicked="HandleMultiSelectSelectNoneClicked" />
	}
	@Columns
	@if (ContextMenu != null)
	{
		<ContextMenuGridColumn TItem="TItem" ContextMenu="ContextMenu" />
	}
</CascadingValue>

@{
	List<IHxGridColumn<TItem>> columnsToRender = GetColumnsToRender();

	bool shouldRenderLoadingData = totalCount == null;
	bool shouldRenderEmptyData = totalCount == 0;
	bool shouldRenderData;
	bool shouldRenderFooter = (totalCount > 0) || ((totalCount == 0) && ShowFooterWhenEmptyData);
	string rowHeight = (ItemRowHeight != null) ? ItemRowHeight.Value.ToString() + "px" : null;

	switch (ContentNavigationModeEffective)
	{
		case GridContentNavigationMode.Pagination:
			shouldRenderData = (totalCount > 0);
			break;

		case GridContentNavigationMode.InfiniteScroll:
			shouldRenderData = (totalCount == null) || (totalCount > 0); // null: we need to render Virtualize even when we have no data yet - Virtalize ensures data load
			break;

		default: throw new InvalidOperationException(ContentNavigationModeEffective.ToString());
	}

	if ((paginationDataItemsToRender?.Count == 0) && (CurrentUserState.PageIndex > 0))
	{
		paginationDecreasePageIndexAfterRender = true;
	}
}

@if (columnsToRender.Any() && (shouldRenderLoadingData || shouldRenderEmptyData || shouldRenderData))
{
	<HxProgressIndicator InProgress="@(InProgress ?? dataProviderInProgress)">

		<div class="@TableContainerCssClass">
			<table class="@CssClassHelper.Combine("hx-grid table", (((SelectionEnabled || MultiSelectionEnabled) && shouldRenderData) ? "table-hover" : null), TableCssClass)">
				<thead>
					<tr class="@HeaderRowCssClass">
						@{
							GridHeaderCellContext gridHeaderCellContext = CreateGridHeaderCellContext();

							foreach (IHxGridColumn<TItem> column in columnsToRender)
							{
								var columnSorting = column.GetSorting();
								bool isCurrentSorting = CurrentUserState.Sorting?.StartsWith(columnSorting) ?? false;
								var headerCellTemplate = column.GetHeaderCellTemplate(gridHeaderCellContext);
								string iconColor = isCurrentSorting ? "text-primary" : "text-muted";
								<th class="@headerCellTemplate.CssClass">
									@if (columnSorting.Any())
									{
										<a @onclick="async () => await HandleSortingClick(columnSorting)" @onclick:stopPropagation role="button">
											<UpdatedContentRenderer Component="column">
												@headerCellTemplate.Template
											</UpdatedContentRenderer>
											@if ((!isCurrentSorting && (columnSorting[0].SortDirection == Collections.SortDirection.Descending))
												 || (isCurrentSorting && (CurrentUserState.Sorting[0].SortDirection == Collections.SortDirection.Descending)))
											{
												<HxIcon CssClass="@CssClassHelper.Combine("ms-1", @iconColor)" Icon="@this.GetDefaults().SortAscendingIcon" />
											}
											else
											{
												<HxIcon CssClass="@CssClassHelper.Combine("ms-1", @iconColor)" Icon="@this.GetDefaults().SortDescendingIcon" />
											}
										</a>
									}
									else
									{
										<UpdatedContentRenderer Component="column">
											@headerCellTemplate.Template
										</UpdatedContentRenderer>
									}
								</th>
							}
						}
					</tr>
				</thead>
				<tbody>
					@if (shouldRenderLoadingData)
					{
						<tr>
							<td colspan="@columnsToRender.Count">
								<div class="text-center text-secondary my-5">
									<div class="fs-3"><HxIcon Icon="@BootstrapIcon.InboxFill" /></div>
									<div>@HxGridLocalizer["LoadingData"]</div>
								</div>
							</td>
						</tr>
					}
					@if (shouldRenderEmptyData)
					{
						<tr>
							<td colspan="@columnsToRender.Count">

								<div class="text-center text-secondary my-5">
									<div class="fs-3"><HxIcon Icon="@BootstrapIcon.Inbox" /></div>
									<div>@HxGridLocalizer["NoData"]</div>

									@if (EmptyDataTemplate != null)
									{
										<div class="my-3">
											@EmptyDataTemplate
										</div>
									}
								</div>

							</td>
						</tr>
					}
					@if (shouldRenderData)
					{

						RenderFragment<TItem> rowTemplate = (TItem item) =>@<text>
					@if (SelectionEnabled || MultiSelectionEnabled)
					{
						<tr role="button"
							height="@rowHeight"
							class="@CssClassHelper.Combine(
											ItemRowCssClass,
											ItemRowCssClassSelector?.Invoke(item)),
											@((SelectionEnabled && (item != null) && item.Equals(SelectedDataItem)) ? "table-active" : null)"
							@onclick="async () => await HandleSelectOrMultiSelectDataItemClick(item)"
							@onclick:stopPropagation>

							@foreach (IHxGridColumn<TItem> column in columnsToRender)
							{
								// same as below in the else section
								CellTemplate cellTemplate = column.GetItemCellTemplate(item);
								<td class="@cellTemplate.CssClass">
									<UpdatedContentRenderer Component="column">
										@cellTemplate.Template
									</UpdatedContentRenderer>
								</td>
							}
						</tr>
					}
					else
					{
						// !SelectionEnabled && !MultiSelectionEnabled - no table-active, no event handlers
						<tr height="@rowHeight"
							class="@CssClassHelper.Combine(ItemRowCssClass, ItemRowCssClassSelector?.Invoke(item))"
							@onclick:stopPropagation>
							@foreach (IHxGridColumn<TItem> column in columnsToRender)
							{
								// same as above this else section
								CellTemplate cellTemplate = column.GetItemCellTemplate(item);
								<td class="@cellTemplate.CssClass">
									<UpdatedContentRenderer Component="column">
										@cellTemplate.Template
									</UpdatedContentRenderer>
								</td>
							}
						</tr>
					}
						</text>;

				@if (ContentNavigationModeEffective == GridContentNavigationMode.InfiniteScroll)
				{
					<Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize TItem="TItem" @ref="infiniteScrollVirtualizeComponent" ItemsProvider="VirtualizeItemsProvider" ItemSize="@(ItemRowHeight ?? 50f)" OverscanCount="@(OverscanCount ?? GetDefaults().OverscanCount)">
						<ItemContent>
							@rowTemplate(@context)
						</ItemContent>
						<Placeholder Context="placeholderContext">
							<tr height="@rowHeight">
								@foreach (IHxGridColumn<TItem> column in columnsToRender)
								{
									CellTemplate placeholderCellTemplate = column.GetItemPlaceholderCellTemplate(placeholderContext);
									<td class="@placeholderCellTemplate.CssClass">
										@placeholderCellTemplate.Template
									</td>
								}
							</tr>
						</Placeholder>
					</Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize>
				}

				@if (ContentNavigationModeEffective == GridContentNavigationMode.Pagination)
				{
					foreach (TItem item in paginationDataItemsToRender)
					{
						@rowTemplate(item)
					}
				}
			}
				</tbody>
				@{
					GridFooterCellContext gridFooterCellContext = CreateGridFooterCellContext();
					CellTemplate[] footerTemplates = columnsToRender.Select(column => column.GetFooterCellTemplate(gridFooterCellContext)).ToArray();
					if (footerTemplates.Any(cellTemplate => cellTemplate.Template != null) // there must be a tempate
						&& shouldRenderFooter)
					{
						<tfoot>
							<tr class="@FooterRowCssClass">
								@foreach (CellTemplate footerCellTemplate in footerTemplates)
								{
									<td class="@footerCellTemplate.CssClass">@footerCellTemplate.Template</td>
								}
							</tr>
						</tfoot>
					}
				}
			</table>
		</div>

		@if ((ContentNavigationModeEffective == GridContentNavigationMode.Pagination) && (PageSizeEffective > 0) && (totalCount != null))
		{
			int totalPages = (totalCount.Value + PageSizeEffective.Value - 1) / PageSizeEffective.Value;
			if (totalPages > 1)
			{
				<div class="@PagerContainerCssClass">
					<HxPager TotalPages="@totalPages"
							 CurrentPageIndex="@CurrentUserState.PageIndex"
							 CurrentPageIndexChanged="@HandlePagerCurrentPageIndexChanged" />
				</div>
			}
		}

	</HxProgressIndicator>
}
