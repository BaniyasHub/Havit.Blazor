@typeparam TItemType

<CascadingValue Value="@columnsListRegistration" Name="@ColumnsRegistrationCascadingValueName">
	@*Aby se dostaly komponenty do kolekcí, musíme je dostat do renderování této komponenty. Chceme však, aby komponenty nic nevyrenderovaly. *@
	@Columns
</CascadingValue>

@{
	List<IHxGridColumn<TItemType>> columnsToRender = GetColumnsToRender();
	TItemType[] itemsToRender = ApplyPaging(ApplySorting(Data)).ToArray();
	// TODO: Není-li zobrazen selectedItem, odvybrat!
}

@if (columnsToRender.Any())
{
	<table class="table">
		<thead>
			<tr>
				@foreach (IHxGridColumn<TItemType> column in columnsToRender)
				{
					var columnSorting = column.GetSorting().ToArray();
					bool isCurrentSorting = CurrentSorting.StartsWith(columnSorting);
					<td>
						@column.GetHeaderTemplate()
						@if (isCurrentSorting)
						{
							<span>
								@if (CurrentSorting[0].SortDirection == Collections.SortDirection.Ascending)
								{
									<svg class="bi bi-arrow-up" width=".75em" height=".75em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
										<path fill-rule="evenodd" d="M8 3.5a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-1 0V4a.5.5 0 0 1 .5-.5z"/>
										<path fill-rule="evenodd" d="M7.646 2.646a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8 3.707 5.354 6.354a.5.5 0 1 1-.708-.708l3-3z"/>
									</svg>
								}
								else
								{
									<svg class="bi bi-arrow-down" width=".75em" height=".75em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
										<path fill-rule="evenodd" d="M4.646 9.646a.5.5 0 0 1 .708 0L8 12.293l2.646-2.647a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 0 1 0-.708z"/>
										<path fill-rule="evenodd" d="M8 2.5a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-1 0V3a.5.5 0 0 1 .5-.5z"/>
									</svg>
								}
							</span>
						}

						@if (columnSorting.Any())
						{
							<a @onclick="async () => await SetSorting(columnSorting)">
								@if ((!isCurrentSorting && (columnSorting[0].SortDirection == Collections.SortDirection.Ascending))
									|| (isCurrentSorting && (CurrentSorting[0].SortDirection == Collections.SortDirection.Descending)))
								{
									<text>chci: ↑</text>
								}
								else
								{
									<text>chci: ↓</text>
								}
							</a>
						}
					</td>
				}
			</tr>
		</thead>
		<tbody>
			@foreach (TItemType item in itemsToRender)
			{
							 
				<tr @onclick="async () => await SelectDataItem(item)" class="@(((item != null) && item.Equals(SelectedDataItem)) ? "selected" : "")">
					@foreach (IHxGridColumn<TItemType> column in columnsToRender)
					{
						<td>@column.GetItemTemplate(item)</td>
					}
				</tr>
			}
		</tbody>
		@if (ShowFooter)
		{
			RenderFragment[] footerTemplates = columnsToRender.Select(column => column.GetFooterTemplate()).ToArray();
			if (footerTemplates.Any(template => template != null))
			{
				<tfoot>
					<tr>
						@foreach (RenderFragment footerFragment in footerTemplates)
						{
							<td>@footerFragment</td>
						}
					</tr>
				</tfoot>
			}
		}

	</table>

	@if (PageSize > 0)
	{
		int totalPages = (Data.Count() + PageSize - 1) / PageSize;
		if (totalPages > 0)
		{
			<HxPager @bind-CurrentPageIndex="@CurrentPageIndex" TotalPages="@totalPages" ShowAllButton="@PagerShowAllButton" ShowAllButtonClicked="@PagerShowAllButtonClicked" />
		}
	}
}
