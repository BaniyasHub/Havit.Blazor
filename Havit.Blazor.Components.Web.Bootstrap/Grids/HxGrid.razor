@namespace Havit.Blazor.Components.Web.Bootstrap
@typeparam TItemType

<CascadingValue Value="@columnsListRegistration" Name="@ColumnsRegistrationCascadingValueName" IsFixed="true">
	@*Aby se dostaly komponenty do kolekcí, musíme je dostat do renderování této komponenty. Chceme však, aby komponenty nic nevyrenderovaly. *@
	@if (SelectionMode == GridSelectionMode.MultiSelect)
	{
		bool allDataItemsSelected = (dataItemsToRender != null) && (SelectedDataItems != null) && (SelectedDataItems.Count > 0) && (dataItemsToRender.Count == SelectedDataItems.Count);
		<MultiSelectGridColumn TItemType="TItemType"
							   AllDataItemsSelected="@allDataItemsSelected"
							   SelectedDataItems="@SelectedDataItems"
							   OnSelectDataItemClicked="HandleMultiSelectSelectDataItemClicked"
							   OnUnselectDataItemClicked="HandleMultiSelectUnselectDataItemClicked"
							   OnSelectAllClicked="HandleMultiSelectSelectAllClicked"
							   OnSelectNoneClicked="HandleMultiSelectSelectNoneClicked" />
	}
	@Columns
	@if (ContextMenu != null)
	{
		<ContextMenuGridColumn TItemType="TItemType" ContextMenu="ContextMenu" />
	}
</CascadingValue>

@if (dataItemsToRender != null)
{
	List<IHxGridColumn<TItemType>> columnsToRender = GetColumnsToRender();
	
	if ((dataItemsToRender.Count == 0) && (CurrentUserState.PageIndex > 0))
	{
		decreasePageIndexAfterRender = true;
	}

	if (columnsToRender.Any())
	{
		<table class="table table-responsible">
			<thead>
				<tr>
					@foreach (IHxGridColumn<TItemType> column in columnsToRender)
					{
						var columnSorting = column.GetSorting();
						bool isCurrentSorting = CurrentUserState.Sorting?.StartsWith(columnSorting) ?? false;
						var headerCellTemplate = column.GetHeaderCellTemplate();
						string iconColor = isCurrentSorting ? "#0d6efd" : "currentColor";
					<td class="@headerCellTemplate.CssClass">
							<UpdatedContentRenderer Component="column">
								@headerCellTemplate.Template
							</UpdatedContentRenderer>

							@if (columnSorting.Any())
							{
								<a @onclick="async () => await HandleSortingClick(columnSorting)" @onclick:stopPropagation role="button" class="text-muted">
									@if ((!isCurrentSorting && (columnSorting[0].SortDirection == Collections.SortDirection.Ascending))
							|| (isCurrentSorting && (CurrentUserState.Sorting[0].SortDirection == Collections.SortDirection.Descending)))
									{
										<svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-sort-alpha-down-alt" fill=@iconColor xmlns="http://www.w3.org/2000/svg">
											<path fill-rule="evenodd" d="M4 2a.5.5 0 0 1 .5.5v11a.5.5 0 0 1-1 0v-11A.5.5 0 0 1 4 2z" />
											<path fill-rule="evenodd" d="M6.354 11.146a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L4 12.793l1.646-1.647a.5.5 0 0 1 .708 0z" />
											<path d="M9.027 7h3.934v-.867h-2.645v-.055l2.567-3.719v-.691H9.098v.867h2.507v.055L9.027 6.309V7zm.637 7l.418-1.371h1.781L12.281 14h1.121l-1.78-5.332h-1.235L8.597 14h1.067zM11 9.687l.652 2.157h-1.351l.652-2.156H11z" />
										</svg>
									}
									else
									{
										<svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-sort-alpha-down" fill=@iconColor xmlns="http://www.w3.org/2000/svg">
											<path fill-rule="evenodd" d="M4 2a.5.5 0 0 1 .5.5v11a.5.5 0 0 1-1 0v-11A.5.5 0 0 1 4 2z" />
											<path fill-rule="evenodd" d="M6.354 11.146a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L4 12.793l1.646-1.647a.5.5 0 0 1 .708 0z" />
											<path d="M9.664 7l.418-1.371h1.781L12.281 7h1.121l-1.78-5.332h-1.235L8.597 7h1.067zM11 2.687l.652 2.157h-1.351l.652-2.157H11zM9.027 14h3.934v-.867h-2.645v-.055l2.567-3.719v-.691H9.098v.867h2.507v.055l-2.578 3.719V14z" />
										</svg>
									}
								</a>
							}
					</td>
					}
				</tr>
			</thead>
			<tbody>
				@foreach (TItemType item in dataItemsToRender)
				{
					if (SelectionMode == GridSelectionMode.Select)
					{
						<tr role="button"
							@onclick="async () => await HandleSelectDataItemClick(item)" @onclick:stopPropagation
							class="@(((item != null) && (SelectionMode == GridSelectionMode.Select) && item.Equals(SelectedDataItem)) ? "table-active" : null)">

							@foreach (IHxGridColumn<TItemType> column in columnsToRender)
							{
								CellTemplate cellTemplate = column.GetItemCellTemplate(item);
								<td class="@cellTemplate.CssClass">
									<UpdatedContentRenderer Component="column">
										@cellTemplate.Template
									</UpdatedContentRenderer>
								</td>
							}
						</tr>
					}
					else
					{
						// SelectionMode: MultiSelect, None - no table-active, no event handlers
						<tr>
							@foreach (IHxGridColumn<TItemType> column in columnsToRender)
							{
								CellTemplate cellTemplate = column.GetItemCellTemplate(item);
								<td class="@cellTemplate.CssClass">
									<UpdatedContentRenderer Component="column">
										@cellTemplate.Template
									</UpdatedContentRenderer>
								</td>
							}
						</tr>
					}
				}
			</tbody>
			@{
				CellTemplate[] footerTemplates = columnsToRender.Select(column => column.GetFooterCellTemplate()).ToArray();
				if (footerTemplates.Any(cellTemplate => cellTemplate.Template != null))
				{
					<tfoot>
						<tr>
							@foreach (CellTemplate footerCellTemplate in footerTemplates)
							{
								<td class="@footerCellTemplate.CssClass">@footerCellTemplate.Template</td>
							}
						</tr>
					</tfoot>
				}
			}

		</table>

		@if ((PageSize > 0) && (dataItemsTotalCount != null))
		{
			int totalPages = (dataItemsTotalCount.Value + PageSize - 1) / PageSize;
			if (totalPages > 1)
			{
				<HxPager TotalPages="@totalPages"
						 CurrentPageIndex="@CurrentUserState.PageIndex"
						 CurrentPageIndexChanged="@HandlePagerCurrentPageIndexChanged" />
			}
		}
	}
}