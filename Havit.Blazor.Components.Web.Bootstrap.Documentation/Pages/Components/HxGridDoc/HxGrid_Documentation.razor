@attribute [Route("/components/" + nameof(HxGrid))]
@attribute [Route("/components/" + nameof(HxGridColumn<object>))]

<ComponentApiDoc Type="typeof(HxGrid<object>)">
    <MainContent>
        <SectionTitle Id="ClientSideDataProcessing">Client-side data processing</SectionTitle>
        <ul>
            <li>Create a field/property for the data.</li>
            <li>Set data to this field/property. Do not sort data.</li>
            <li>Use the extension method <code>ApplyTo</code> (<code>request.ApplyTo(data)</code>) in the <code>@nameof(HxGrid<object>.DataProvider)</code> method to automatically sort and page data from the field/property. While the result of the <code>@nameof(HxGrid<object>.DataProvider)</code> method is a generic <code>Task</code>, the result must be wrapped using <code>Task.FromResult</code>. It is easy, see the demo source code.</li>
        </ul>
        <Demo Type="typeof(HxGrid_ClientSideDemo)" />

        <SectionTitle Id="ServerSidePagingAndSorting">Server side paging &amp; sorting</SectionTitle>
        <ul>
            <li>Implement the <code>@nameof(HxGrid<object>.DataProvider)</code> method to delegate the paging &amp; sorting to the server side. The sample code does not have this implementation.</li>
        </ul>
        <Demo Type="typeof(HxGrid_ServerSideDemo)" />

        <DocAlert Type="DocAlertType.Warning">
            The <code>@nameof(HxGrid).@nameof(HxGrid<object>.DataProvider)</code> should always return an instance of <code>@nameof(GridDataProviderResult<object>)</code>, <code>null</code> is not allowed.
            The method you provide is <code>async</code> and should <code>await</code> the data if needed (loading progress is indicated in meantime).
        </DocAlert>

        <SectionTitle Id="EmptyData" />
        <Demo Type="typeof(HxGrid_EmptyDataDemo)" />

        <SectionTitle Id="InfiniteScroll">Infinite scroll (Virtualized)</SectionTitle>
        <p>
            You can switch from paging to infinite-scoll by setting <code>ContentNavigationMode="GridContentNavigationMode.InfiniteScroll"</code>.
            Use a Placeholder (<code>&lt;Placeholder&gt;...&lt;/Placeholder&gt;</code>) to display content until the item data is available.
        </p>
        <DocAlert Type="DocAlertType.Warning">
            The <code>ItemRowHeight</code> parameter should be set for the virtualization to work properly. The default value is 50 pixels.
        </DocAlert>
        <Demo Type="typeof(HxGrid_VirtualizedDemo)" />

        <SectionTitle Id="ContextMenu" />
        <Demo Type="typeof(HxGrid_Demo_ContextMenu)" />

        <SectionTitle Id="Multiselect">Multiselect with checkboxes</SectionTitle>
        <p>You can let the user select multiple rows with <code>@nameof(HxGrid<object>.MultiSelectionEnabled)="true"</code>, selected items are represented by <code>@nameof(HxGrid<object>.SelectedDataItems)</code> parameter (bindable).</p>
        <DocAlert>
            <code>@nameof(HxGrid<object>.SelectedDataItems)</code> contains only visible items. Items are removed from the selection if they are not rendered (e.g. after paging, sorting, ...).
            <code>@nameof(HxGrid<object>.MultiSelectionEnabled)</code> cannot be combined with <code>@nameof(GridContentNavigationMode.InfiniteScroll)</code>.
        </DocAlert>
        <Demo Type="typeof(HxGrid_Demo_Multiselect)" />

        <SectionTitle Id="inline-editing">Inline-editing</SectionTitle>
        <p>To achieve an inline-editing experience, you can use the <code>SelectedDataItem</code> and render editing UI for such items. Simply specify the content of the <code>ItemTemplate</code> in <code>HxGridColumn</code> and use the <code>SelectedDataItemChanged</code> event to save changes (or you can add a column with command buttons).</p>
        <Demo Type="typeof(HxGrid_Demo_InlineEditing)" />
    </MainContent>

    <CssVariables>
        <ComponentApiDocCssVariable Name="--hx-grid-button-hover-background" Default="var(--bs-gray-300)">
            Grid button background color on hover.
        </ComponentApiDocCssVariable>
        <ComponentApiDocCssVariable Name="--hx-grid-button-border-radius" Default=".2rem">
            Grid button border radius.
        </ComponentApiDocCssVariable>
        <ComponentApiDocCssVariable Name="--hx-grid-sorted-icon-color" Default="var(--bs-primary)">
            Color of the sorted icon.
        </ComponentApiDocCssVariable>
    </CssVariables>
</ComponentApiDoc>

<ComponentApiDoc Type="typeof(HxGridColumn<object>)" />
