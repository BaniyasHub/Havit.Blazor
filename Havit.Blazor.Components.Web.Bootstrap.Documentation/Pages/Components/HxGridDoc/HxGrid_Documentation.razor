@page "/components/hxgrid"

<h1>@nameof(HxGrid<object>)</h1>
<p class="lead">
	Displays tabular data from data source. Includes support for client-side and server-side paging &amp; sorting.
</p>

<h3>Properties</h3>
<ul>
	<li>
		<strong>@nameof(HxGrid<object>.Columns)</strong><br />
		Columns to display, see <code>@nameof(HxGridColumn<object>)</code> below.
	</li>
	<li>
		<strong>@nameof(HxGrid<object>.Data)</strong><br />
		<p>Data items to render. Use when no server-side paging &amp; sorting is required (no paging &amp; sorting at all or when client-side paging &amp; sorting is applicable).</p>
		<p>It should contain all items to display across all pages.</p>
	</li>
	<li>
		<strong>@nameof(HxGrid<object>.DataProvider)</strong><br />
		<p>Provider for access server-side data.</p>
		<p>It should return data count and data for the page in the specified order.</p>
		<p>See client-side and server-side paging &amp; sorting demo below.</p>
	</li>
	<li>
		<strong>@nameof(HxGrid<object>.CurrentUserState), @nameof(HxGrid<object>.CurrentUserStateChanged)</strong><br />
		Current state of the grid (page index, sorting).
	</li>
	<li>
		<strong>@nameof(HxGrid<object>.SelectedDataItem), @nameof(HxGrid<object>.SelectedDataItemChanged)</strong><br />
		Currently selected item.
	</li>
	<li>
		<strong>@nameof(HxGrid<object>.AutoSort)</strong><br />
		<p>Indicates whether the auto-sorting is on.</p>
		<p>Default: <code>true</code> when all the sortings in all grid columns have SortExpression (otherwise <code>false</code>).</p>
	</li>
</ul>

<h3>Commands</h3>
<p class="red">TODO</p>

<h2>Setting (loading) data to the grid</h2>
<h4>No paging &amp; sorting or client-side paging &amp; sorting</h4>
<ul>
	<li>Create a field/property for the data.</li>
	<li>Set data to this field/property. Do not sort data.</li>
	<li>Assign this field/property to <code>@nameof(HxGrid<object>.Data)</code> property.</li>
</ul>

<Demo Title="Client-side paging and sorting" Type="typeof(HxGrid_ClientSideDemo)" />

<h4>Server side paging &amp; sorting:</h4>
<ul>
	<li>Create a method (DataProvider) for getting data for the specified page in the specified order and total data items count.</li>
	<li>Assign this method to <code>@nameof(HxGrid<object>.DataProvider)</code> property (as a delegate).</li>	
</ul>

<Demo Title="Server-side paging and sorting" Type="typeof(HxGrid_ServerSideDemo)" />

<h2>@nameof(HxGridColumn<object>)</h2>
<h3>Properties</h3>
<ul>
	<li>
		<strong>@nameof(HxGridColumn<object>.ItemTextSelector)</strong><br />
		Function to get text to display as grid cell content. Use to display simple text content.
	</li>
	<li>
		<strong>@nameof(HxGridColumn<object>.ItemTemplate)</strong><br />
		Template to display as grid cell content. Can be used to display complex HTML content.
	</li>
	<li>
		<strong>@nameof(HxGridColumn<object>.ItemCssClass)</strong><br />
		CSS class to be added to every content cell.
	</li>
	<li>
		<strong>@nameof(HxGridColumn<object>.ItemCssClassSelector)</strong><br />
		Function to get CSS class for the content cell (based on the data item).
	</li>
	<li>
		<strong>@nameof(HxGridColumn<object>.HeaderText), @nameof(HxGridColumn<object>.HeaderTemplate), @nameof(HxGridColumn<object>.HeaderCssClass)</strong><br />
		Column header.
	</li>
	<li>
		<strong>@nameof(HxGridColumn<object>.FooterText), @nameof(HxGridColumn<object>.FooterTemplate), @nameof(HxGridColumn<object>.FooterCssClass)</strong><br />
		Column footer.
	</li>
</ul>

<h3>Sorting properties</h3>
<ul>
	<li>
		<strong>@nameof(HxGridColumn<object>.SortKeySelector)</strong><br />
		<p>To be used for &quot;strongly typed&quot; setting of sorting, required for client-side sorting.</p>
		<p>Must be <code>IComparable</code>.</p>
		<p>Sorting of the column does not support multiple expressions. Create an artifial property and implement <code>IComparable</code>.</p>
	</li>
	<li>
		<strong>@nameof(HxGridColumn<object>.SortString)</strong><br />
		<p>Use to set sorting as a string, ie. to get value to pass to backend.</p>
		<p>Ignored for client-side sorting.</p>
	</li>
	<li>
		<strong>@nameof(HxGridColumn<object>.SortDirection)</strong><br />
		<p>Initial sorting direction. Default is <code>@Havit.Collections.SortDirection.Ascending</code>.</p>
	</li>
	<li>
		<strong>@nameof(HxGridColumn<object>.IsDefaultSortColumn)</strong><br />
		<p>Set <code>true</code> for the column which is to be used for default sorting.</p>
	</li>
</ul>

<div class="alert alert-warning">
	If sorting is enabled (client-side or server-side), there must be a single column with <code>@nameof(HxGridColumn<object>.IsDefaultSortColumn)</code> set to <code>true</code> (otherwise <code>InvalidOperationException</code> is thrown)!
</div>


