@attribute [Route("/components/" + nameof(HxGrid))]
@attribute [Route("/components/" + nameof(HxGridColumn<object>))]

<ComponentApiDoc Type="typeof(HxGrid<TItem>)">
    <MainContent>

        <h2>Data-binding</h2>
        <p>
            Implement the <code>@nameof(HxGrid<object>.DataProvider)</code> method which is provided with a "request"
            (requested sorting and paging) and returns a "result" (items to display and total count of items).
        </p>
        <Demo Type="typeof(HxGrid_Demo_DataProvider)" />

        <SectionTitle Id="ApplyTo">Automatic sorting and paging</SectionTitle>
        <p>
            If you have your <code>IEnumerable</code> data-source ready (all items), you can use the <code>request.ApplyTo(data)</code>
            extension method to apply sorting and paging automatically.
        </p>
        <Demo Type="typeof(HxGrid_Demo_ApplyTo)" />

        <DocAlert Type="DocAlertType.Warning">
            The <code>@nameof(HxGrid).@nameof(HxGrid<object>.DataProvider)</code> should always return an instance of <code>@nameof(GridDataProviderResult<object>)</code>, <code>null</code> is not allowed.
            The method you provide is <code>async</code> and should <code>await</code> the data if needed (loading progress is indicated in meantime).
        </DocAlert>

        <SectionTitle Id="RefreshData">Refreshing data</SectionTitle>
        <p>
            Whenever you need to refresh data in the grid (e.g. when the filter to be applied changes),
            call the <code>gridComponent.RefreshDataAsync()</code> method to let the grid know
            it should ask the <code>DataProvider</code> for fresh data.
        </p>
        <Demo Type="typeof(HxGrid_Demo_RefreshData)" />

        <SectionTitle Id="EmptyData" />
        <Demo Type="typeof(HxGrid_EmptyDataDemo)" />

        <SectionTitle Id="InfiniteScroll">Infinite scroll (Virtualized)</SectionTitle>
        <p>
            You can switch from paging to infinite-scoll by setting <code>ContentNavigationMode="GridContentNavigationMode.InfiniteScroll"</code>.
            Use a Placeholder (<code>&lt;Placeholder&gt;...&lt;/Placeholder&gt;</code>) to display content until the item data is available.
        </p>
        <DocAlert Type="DocAlertType.Warning">
            The <code>ItemRowHeight</code> parameter should be set for the virtualization to work properly. The default value is 50 pixels.
        </DocAlert>
        <Demo Type="typeof(HxGrid_VirtualizedDemo)" />

        <SectionTitle Id="ContextMenu" />
        <Demo Type="typeof(HxGrid_Demo_ContextMenu)" />

        <SectionTitle Id="Multiselect">Multiselect with checkboxes</SectionTitle>
        <p>You can let the user select multiple rows with <code>@nameof(HxGrid<object>.MultiSelectionEnabled)="true"</code>, selected items are represented by <code>@nameof(HxGrid<object>.SelectedDataItems)</code> parameter (bindable).</p>
        <DocAlert>
            <code>@nameof(HxGrid<object>.SelectedDataItems)</code> contains only visible items. Items are removed from the selection if they are not rendered (e.g. after paging, sorting, ...).
            <code>@nameof(HxGrid<object>.MultiSelectionEnabled)</code> cannot be combined with <code>@nameof(GridContentNavigationMode.InfiniteScroll)</code>.
        </DocAlert>
        <Demo Type="typeof(HxGrid_Demo_Multiselect)" />

        <SectionTitle Id="inline-editing">Inline-editing</SectionTitle>
        <p>To achieve an inline-editing experience, you can use the <code>SelectedDataItem</code> and render editing UI for such items. Simply specify the content of the <code>ItemTemplate</code> in <code>HxGridColumn</code> and use the <code>SelectedDataItemChanged</code> event to save changes (or you can add a column with command buttons).</p>
        <Demo Type="typeof(HxGrid_Demo_InlineEditing)" />
    </MainContent>

    <CssVariables>
        <ComponentApiDocCssVariable Name="--hx-grid-button-hover-background" Default="var(--bs-gray-300)">
            Grid button background color on hover.
        </ComponentApiDocCssVariable>
        <ComponentApiDocCssVariable Name="--hx-grid-button-border-radius" Default=".2rem">
            Grid button border radius.
        </ComponentApiDocCssVariable>
        <ComponentApiDocCssVariable Name="--hx-grid-sorted-icon-color" Default="var(--bs-primary)">
            Color of the sorted icon.
        </ComponentApiDocCssVariable>
    </CssVariables>
</ComponentApiDoc>

<ComponentApiDoc Type="typeof(HxGridColumn<TItem>)" />
