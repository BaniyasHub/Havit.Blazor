@attribute [Route("/components/" + nameof(HxTooltip))]

<ComponentApiDoc Type="typeof(HxTooltip)">

	<DocAlert Type="DocAlertType.Warning">
		The tooltip wrapper gets rendered only if <code>Text</code> or <code>WrapperCssClass</code> parameters is set.
		If both are <code>null</code> or empty, only the <code>ChildContent</code> is rendered.
	</DocAlert>

	<SectionTitle Id="BasicUsage" />
	<Demo Type="typeof(HxTooltip_Demo_BasicUsage)" Tabs="false" />

	<SectionTitle Id="HxButtonSupport">@nameof(HxButton) support</SectionTitle>
	<p>The tooltip support is also built-in in <a href="/components/@nameof(HxButton)">@nameof(HxButton)</a> component via <code>Tooltip</code> parameter.</p>
	<Demo Type="typeof(HxTooltip_Demo_Button)" Tabs="false" />

	<SectionTitle Id="Placement" />
	<p>You can change the placement of the tooltip with <code>@nameof(HxTooltip.Placement)</code> parameter:</p>
	<Demo Type="typeof(HxTooltip_Demo_Placement)" />

	<SectionTitle Id="HTMLContent">HTML content</SectionTitle>
	<p>Use <code>Html="true"</code> to enable HTML in the tooltip.</p>
	<Demo Type="typeof(HxTooltip_Demo_HtmlContent)" />

	<SectionTitle Id="Programmability" />
	<p>
		You can use <code>ShowAsync()</code> and <code>HideAsync()</code> methods + <code>OnShown</code> and <code>OnHidden</code> events
		to program your own interaction.
	</p>
	<Demo Type="typeof(HxTooltip_Demo_MethodsEvents)" />

</ComponentApiDoc>
