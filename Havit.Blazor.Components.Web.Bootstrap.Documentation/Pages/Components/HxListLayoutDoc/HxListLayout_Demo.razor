<HxListLayout Title="Title" TFilterModel="FilterModelDto" FilterModel="filterModel" FilterModelChanged="HandleFilterModelChanged">
    <NamedViewsTemplate>
        <HxNamedViewList TFilterModel="FilterModelDto" FilterModel="filterModel" FilterModelChanged="HandleFilterModelChanged" NamedViews="namedViews" OnNamedViewSelected="NamedViewSelected" /> @* TODO *@
    </NamedViewsTemplate>
    <SearchTemplate>
        
    </SearchTemplate>
    <FilterTemplate Context="filterContext">
        <HxInputNumber Label="MinimumItemId" @bind-Value="filterContext.MinimumItemId" />
    </FilterTemplate>
    <CommandsTemplate>
        <HxButton Text="Add an invoice" Color="ThemeColor.Primary" Icon="BootstrapIcon.PlusLg" CssClass="ms-1" OnClick="NewItemClicked" />
    </CommandsTemplate>
    <DataTemplate>
        <HxGrid @ref="gridComponent" TItem="DataItemDto" PageSize="20" DataProvider="LoadDataItems" SelectedDataItem="currentItem" SelectedDataItemChanged="HandleSelectedDataItemChanged">
            <Columns>
                <HxGridColumn TItem="DataItemDto" HeaderText="Id" ItemTextSelector="@(item => item.ItemId.ToString())" SortString="@nameof(DataItemDto.ItemId)" IsDefaultSortColumn="true" />
                <HxGridColumn TItem="DataItemDto" HeaderText="Name" ItemTextSelector="@(item => item.Name)" SortString="@nameof(DataItemDto.Name)" />
            </Columns>
            <ContextMenu Context="item">
                <HxContextMenu>
                    <HxContextMenuItem Text="Delete" OnClick="async () => await DeleteItemClicked(item)" ConfirmationQuestion="@($"Are you sure you want to delete {item.Name}?")" />
                </HxContextMenu>
            </ContextMenu>
        </HxGrid>
    </DataTemplate>
    <DetailTemplate>
        Edit: @currentItem?.ItemId
    </DetailTemplate>
</HxListLayout>

@code {
    [Inject] protected NavigationManager NavigationManager { get; set; }

    private DataItemDto currentItem;
    private FilterModelDto filterModel = new FilterModelDto();
    private HxGrid<DataItemDto> gridComponent;

    private readonly IEnumerable<NamedView<FilterModelDto>> namedViews = new List<NamedView<FilterModelDto>>()
        {
            new NamedView<FilterModelDto>("Minimum = 1", () => new FilterModelDto { MinimumItemId = 1 } ),
            new NamedView<FilterModelDto>("Minimum = 2", () => new FilterModelDto { MinimumItemId = 2 }),
            new NamedView<FilterModelDto>("Minimum = 3", () => new FilterModelDto { MinimumItemId = 3 })
        };

    private Task<GridDataProviderResult<DataItemDto>> LoadDataItems(GridDataProviderRequest<DataItemDto> request)
    {
        List<DataItemDto> data = new List<DataItemDto>()
            {
                new DataItemDto() { ItemId = 1, Name = "One"},
                new DataItemDto() { ItemId = 2, Name = "Two"},
                new DataItemDto() { ItemId = 3, Name = "Three"}
            };

        IEnumerable<DataItemDto> result = data.Where(i => i.ItemId >= filterModel.MinimumItemId).ToList();

        return Task.FromResult(new GridDataProviderResult<DataItemDto>()
        {
            Data = result,
            TotalCount = result.Count()
        });
    }

    private async Task HandleFilterModelChanged(FilterModelDto newFilterModel)
    {
        filterModel = newFilterModel;
        await gridComponent.RefreshDataAsync();
    }

    protected async Task NamedViewSelected(NamedView<FilterModelDto> namedView)
    {
        filterModel = namedView.Filter();
        await gridComponent.RefreshDataAsync();
    }

    protected async Task SearchRequested()
    {
        await gridComponent.RefreshDataAsync();
    }

    private Task DeleteItemClicked(DataItemDto dataItemDto)
    {
        _ = dataItemDto;
        return Task.CompletedTask;
    }

    private Task HandleSelectedDataItemChanged(DataItemDto selection)
    {
        currentItem = selection;
        // await dataItemEditComponent.ShowAsync();
        return Task.CompletedTask;
    }

    private Task NewItemClicked()
    {
        currentItem = new DataItemDto();
        // await dataItemEditComponent.ShowAsync();
        return Task.CompletedTask;
    }

    public record FilterModelDto
    {
        public int MinimumItemId { get; set; }
    }

    public record DataItemDto
    {
        public int ItemId { get; set; }
        public string Name { get; set; }
    }
}