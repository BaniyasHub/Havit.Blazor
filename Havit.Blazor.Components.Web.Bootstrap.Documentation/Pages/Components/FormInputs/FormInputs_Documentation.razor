@page "/components/forminputs"

<h1>Form Inputs</h1>
<p class="lead">
	Bootstrap-based input fields with labels and validation messages.
	See also <a href="https://v5.getbootstrap.com/docs/5.0/forms/overview/">Bootstrap Forms</a>.
</p>

<div class="alert alert-info">
	Despite InputBase&lt;&gt; class requires to to be used within <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.forms.editform">EditForm</a> with <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/data-binding">data binding</a> - they all require <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.forms.editcontext">EditContext</a>, these components do not have such requirement.
</div>

<div class="alert alert-info">
	All components stop the onclick event propagation.
</div>


<Demo Title="Quick Demo" Type="@typeof(FormInputs_QuickDemo)" />

<h2>Common component properties</h2>
<ul>
	<li>
		<strong>@nameof(HxInputBase<object>.Value), @nameof(HxInputBase<object>.ValueChanged)</strong><br />
		Value of the input.
	</li>
	<li>
		<strong>@nameof(HxInputBase<object>.Label), @nameof(HxInputBase<object>.LabelTemplate)</strong><br />
		Label to be next to the input. Label is rendered before the input.
	</li>
	<li>
		<strong>@nameof(HxInputBase<object>.Hint), @nameof(HxInputBase<object>.HintTemplate)</strong><br />
		Hint to be next to the input. Label is rendered after the input and validation message.
	</li>
	<li>
		<strong>@nameof(HxInputBaseWithInputGroups<object>.InputGroupStart), @nameof(HxInputBaseWithInputGroups<object>.InputGroupEnd), @nameof(HxInputBaseWithInputGroups<object>.InputGroupStartTemplate), @nameof(HxInputBaseWithInputGroups<object>.InputGroupEndTemplate)</strong> (not all inputs)<br />
		Templates for input groups before and after the input. See <a href="https://v5.getbootstrap.com/docs/5.0/forms/input-group/">Input group details in Bootstrap documentation</a>.
	</li>
	<li>
		<strong>@nameof(HxInputBase<object>.InputCssClass)</strong><br />
		CSS class to be set to the input.
	</li>
	<li>
		<strong>@nameof(HxInputBase<object>.ShowValidationMessage)</strong><br />
		Can be used to suppress rendering of a validation message.
	</li>
	<li>
		<strong>@nameof(HxInputBase<object>.Enabled)</strong><br />
		<EnabledExplanation />
	</li>
</ul>

<h2>@nameof(HxInputText), @nameof(HxInputTextArea)</h2>

<ul>
	<li>
		<strong>@nameof(HxInputText.Type)</strong> (@nameof(HxInputText) only)<br />
		Input type (@InputType.Text.ToString(), @InputType.Password.ToString(), @InputType.Search.ToString(), ...).
	</li>
	<li>
		<strong>@nameof(HxInputNumber<decimal>.Placeholder)</strong>
		Placeholder text.
	</li>
	<li>
		<strong>@nameof(HxInputText.BindEvent)</strong><br />
		Sets when to update model from input (onchange or oninput).
	</li>
	<li>Attribute <code>maxlength</code> is rendered when @nameof(System.ComponentModel.DataAnnotations.MaxLengthAttribute) is present on the model.</li>
</ul>

<h2>@nameof(HxInputNumber<int>)</h2>
<ul>
	<li>
		<strong>@nameof(HxInputNumber<decimal>.ParsingErrorMessage)</strong><br />
		Error message for validator when user input is not possible to parse.
		When not set, error message is retrieved from the theme. When not set, exception is thrown.
		{0} will be replaced by @nameof(HxInputBase<object>.Label), {1} is replaced by bounded property name.
	</li>
	<li>
		<strong>@nameof(HxInputNumber<decimal>.Decimals)</strong>
		Sets the number of decimal points, when not set, default is 2 for floating point types. Cannot be used for integer types.
	</li>
	<li>
		<strong>@nameof(HxInputNumber<decimal>.Placeholder)</strong>
		Placeholder text.
	</li>
	<li>
		Supported data types: int, long, float, double and decimal (and nullable variants).
	</li>
</ul>

<h2>@nameof(HxInputDate<DateTime>)</h2>
<ul>
	<li>
		<strong>@nameof(HxInputNumber<decimal>.ParsingErrorMessage)</strong><br />
		Error message for validator when user input is not possible to parse.
		When not set, error message is retrieved from the theme. When not set, exception is thrown.
		{0} will be replaced by @nameof(HxInputBase<object>.Label), {1} is replaced by bounded property name.
	</li>
	<li>
		Supported data types: DateTime and DateTimeOffset (and nullable variants).
	</li>
</ul>

<h2>@nameof(HxInputCheckBox)</h2>
<h2>@nameof(HxInputSwitch)</h2>

<Demo Title="Quick Demo" Type="@typeof(FormInputs_Demo)" />
