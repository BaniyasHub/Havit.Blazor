@page "/components/hxbutton"

<h1>@nameof(HxButton), @nameof(HxSubmit)</h1>
<p class="lead">
	Just buttons. @nameof(HxSubmit) submits form (and causes validation) while @nameof(HxButton) does not.
</p>

<h3>Properties</h3>
<ul>
	<li>
		<strong>@nameof(HxButton.CssClass)</strong><br />
		CSS class to be set to the button.
	</li>
	<li>
		<strong>@nameof(HxButton.Icon)</strong><br />
		Uses <a href="/components/hxbootstrapicon">HxBootstrapIcon</a> to display an icon.
	</li>
	<li>
		<strong>@nameof(HxButton.Text)</strong><br />
		Button text.
	</li>
	<li>
		<strong>@nameof(HxButton.Skin)</strong><br />
		Skin with shared button settings. See below.
	</li>
	<li>
		<strong>@nameof(HxButton.ChildContent)</strong><br />
		Content of the button when @nameof(HxButton.Text) and @nameof(HxButton.Icon) properties are not good enough for your needs.
	</li>
</ul>

<h3>Skins</h3>
<p>Common buttons (OK, Save, Apply, Export, ...) can be defined using a skin. Skin is a shared configuration of a button defined in this library or in a custom code. Skins are localizable, embedded skins are localized (English, Czech).</p>
<p>Skins are used as readonly instances (strong-type), no string identifiers (such as SkinID in WebForms) are used.</p>
<p>See the demo on how to define custom skins. To make a skin localizable, use <code>ResourceType</code> property to set where to find the translations.</p>
<p>See <TypeLink Type="typeof(ButtonSkins)">available skins</TypeLink>.</p>

<Demo Type="typeof(HxButton_Demo)" />
