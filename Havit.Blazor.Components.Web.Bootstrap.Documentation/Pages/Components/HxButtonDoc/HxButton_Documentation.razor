@attribute [Route("/components/" + nameof(HxButton))]
@attribute [Route("/components/" + nameof(HxSubmit))]

<ComponentApiDoc Type="typeof(HxButton)">

	<h3>Spinner &amp; Single click protection</h3>
	<HxAlert Color="ThemeColor.Warning">
		EditForm's <code>OnSubmit</code> events are not captured for spinner automation. Use HxButton's <code>OnClick</code>, <code>OnValidClick</code> and <code>OnInvalidClick</code> instead.
	</HxAlert>
	<HxAlert Color="ThemeColor.Info">
		If (and only if) there is any of the <code>OnClick</code> handlers set, the single click protection sets the button to <code>disabled</code> during the callback (usually together with the Spinner).
		It is intentionally not set, if there is no <code>OnClick</code> handler, as there might be an <code>OnSubmit</code> handler of the containing <code>EditForm</code>
		set which would have been blocked if the button is disabled (see above).
	</HxAlert>

	<h3>Skins</h3>
	<p>Common buttons (OK, Save, Apply, Export, ...) can be defined using a skin. Skin is a shared configuration of a button defined in this library or in a custom code. Skins are localizable, embedded skins are localized (English, Czech).</p>
	<p>Skins are used as readonly instances (strong-type), no string identifiers (such as SkinID in WebForms) are used.</p>
	<p>See the demo on how to define custom skins. To make a skin localizable, use <code>ResourceType</code> property to set where to find the translations.</p>
	<p>See <TypeLink Type="typeof(ButtonSkins)">available skins</TypeLink>.</p>

	<h3>Demo</h3>
	<Demo Type="typeof(HxButton_Demo)" />

	<h3>HxSubmit</h3>
	<p>There is a <code>HxSubmit</code> component (as direct ancestor of <code>HxButton</code>) which renders as <code>&lt;button type="submit"&gt;</code>. The API is the same.</p>

</ComponentApiDoc>

<ComponentApiDoc Type="typeof(HxSubmit)" />
