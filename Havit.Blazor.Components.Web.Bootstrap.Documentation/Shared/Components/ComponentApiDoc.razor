@using Havit.Blazor.Components.Web.Bootstrap.Documentation.Services
<h1 id="@ApiRenderer.RemoveSpecialCharacters(Type.Name)">@ApiRenderer.RemoveSpecialCharacters(Type.Name)</h1>
@if (!String.IsNullOrWhiteSpace(model.Class?.Comments?.Summary))
{
	<p class="lead">@((MarkupString)model.Class.Comments.Summary)</p>
}

<ResponsiveOnThisPageNavigation />

@ChildContent
@MainContent

@if (hasApi)
{
	<SectionTitle HeadingTag="h2" Id="api">API</SectionTitle>
}

@if (isDelegate)
{
	<SectionTitle HeadingTag="h6"><code>@((MarkupString)model.DelegateSignature)</code></SectionTitle>
}

@if (isEnum)
{
	<SectionTitle HeadingTag="@ApiSectionHeadingTag" Level="1" Id="enum-values">Enum Values</SectionTitle>
	<div class="table-responsive">
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Name</th>
					<th>Value</th>
					<th>Description</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var enumMember in model.EnumMembers)
				{
					<tr>
						<td>@enumMember.Name</td>
						<td>@enumMember.Value</td>
						<td class="summary">@((MarkupString)enumMember.Summary)</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

@if (hasParameters)
{
	<SectionTitle HeadingTag="@ApiSectionHeadingTag" Level="1" Id="parameters">Parameters</SectionTitle>

	<div class="table-responsive">
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Name</th>
					<th>Type</th>
					<th>Description</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var property in model.Parameters.OrderByDescending(p => p.EditorRequired).ThenBy(p => p.PropertyInfo.Name))
				{
					<tr>
						<td>
							@if (property.IsStatic)
							{
								<HxBadge Color="ThemeColor.Light" TextColor="ThemeColor.Dark">static</HxBadge>
							}

							<strong>@property.PropertyInfo.Name</strong>
							@if (property.EditorRequired)
							{
								<sup><HxBadge Color="ThemeColor.Warning" CssClass="ms-2">REQUIRED</HxBadge></sup>
							}
						</td>
						<td><code>@((MarkupString)ApiRenderer.FormatType(property.PropertyInfo.PropertyType))</code></td>
						<td class="summary">@((MarkupString)property.Comments.Summary)</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

@if (hasProperties)
{
	<SectionTitle HeadingTag="@ApiSectionHeadingTag" Level="1" Id="properties">Other properties</SectionTitle>
	<div class="table-responsive">
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Name</th>
					<th>Type</th>
					<th>Description</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var property in model.Properties.OrderBy(p => p.PropertyInfo.Name))
				{
					<tr>
						<td><strong>@property.PropertyInfo.Name</strong></td>
						<td><code>@((MarkupString)ApiRenderer.FormatType(property.PropertyInfo.PropertyType))</code></td>
						<td class="summary">@((MarkupString)property.Comments.Summary)</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

@if (hasEvents)
{
	<SectionTitle HeadingTag="@ApiSectionHeadingTag" Level="1" Id="events">Event callbacks</SectionTitle>

	<div class="table-responsive">
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Name</th>
					<th>Type</th>
					<th>Description</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var currentEvent in model.Events.OrderBy(e => e.PropertyInfo.Name))
				{
					<tr>
						<td><strong>@currentEvent.PropertyInfo.Name</strong> </td>
						<td><code>@((MarkupString)ApiRenderer.FormatType(currentEvent.PropertyInfo.PropertyType))</code></td>
						<td class="summary">@((MarkupString)currentEvent.Comments.Summary)</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

@if (hasMethods)
{
	<SectionTitle HeadingTag="@ApiSectionHeadingTag" Level="1" Id="methods">Methods</SectionTitle>
	<div class="table-responsive">
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Method</th>
					<th>Returns</th>
					<th>Description</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var method in model.Methods.OrderBy(m => m.MethodInfo.Name))
				{
					<tr>
						<td><strong>@method.MethodInfo.Name</strong>@((MarkupString)@method.GetParameters())</td>
						<td><code>@((MarkupString)ApiRenderer.FormatMethodReturnType(method.MethodInfo.ReturnType, model))</code></td>
						<td class="summary">@((MarkupString)method.Comments.Summary)</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

@if (hasStaticProperties)
{
	<SectionTitle HeadingTag="@ApiSectionHeadingTag" Level="1" Id="static-properties">Static properties</SectionTitle>

	<div class="table-responsive">
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Property</th>
					<th>Type</th>
					<th>Description</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var property in model.StaticProperties.OrderBy(p => p.PropertyInfo.Name))
				{
					<tr>
						<td><strong>@property.PropertyInfo.Name</strong></td>
						<td><code>@((MarkupString)ApiRenderer.FormatType(property.PropertyInfo.PropertyType))</code></td>
						<td class="summary">@((MarkupString)property.Comments.Summary)</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

@if (hasStaticMethods)
{
	<SectionTitle HeadingTag="@ApiSectionHeadingTag" Level="1" Id="static-methods">Static Methods</SectionTitle>

	<div class="table-responsive">
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Method</th>
					<th>Type</th>
					<th>Description</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var method in model.StaticMethods.OrderBy(m => m.MethodInfo.Name))
				{
					<tr>
						<td><strong>@method.MethodInfo.Name</strong> @((MarkupString)@method.GetParameters())</td>
						<td><code>@((MarkupString)ApiRenderer.FormatType(method.MethodInfo.ReturnType))</code></td>
						<td class="summary">@((MarkupString)method.Comments.Summary)</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

@if (hasCssVariables)
{
	<SectionTitle HeadingTag="@ApiSectionHeadingTag" Level="1" Id="css-variables">CSS Variables</SectionTitle>
	<div class="table-responsive">
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Name</th>
					<th>Description</th>
					<th>Default</th>
				</tr>
			</thead>
			<tbody>
				@CssVariables
			</tbody>
		</table>
	</div>
}

