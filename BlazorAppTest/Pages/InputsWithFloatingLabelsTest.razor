@page "/InputsWithFloatingLabelsTest"

@using System.Globalization;
@using System.ComponentModel.DataAnnotations

<h1>Inputs</h1>

<div class="card" @onclick="HandleCardClick">
	<div class="card-header">OnClick propagation test</div>
	<div class="card-body">

		<HxFilterForm @ref="filterForm" @bind-Model="@model" OnChipsUpdated="HandleChipUpdated">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<HxInputText LabelType="LabelType.Floating" Label="Text (large)" InputSize="InputSize.Large" @bind-Value="@context.TextBasic" Hint="@context.TextBasic" />

			<HxInputText LabelType="LabelType.Floating" Label="Text (oninput)" @bind-Value="@context.TextOnInput" BindEvent="BindEvent.OnInput">
				<HintTemplate>
					Hint: @context.TextOnInput
				</HintTemplate>
			</HxInputText>

			<HxInputText LabelType="LabelType.Floating" Label="Text (disabled)" Enabled="false" @bind-Value="@context.TextDisabled" />
			<HxInputText LabelType="LabelType.Floating" Label="Text (password)" Type="InputType.Password" @bind-Value="@context.TextPassword" />
			<HxInputText LabelType="LabelType.Floating" Label="Text (email)" Type="InputType.Email" @bind-Value="@context.TextEmail" />

			<HxInputTextArea LabelType="LabelType.Floating" Label="TextArea" @bind-Value="@context.TextLong" />

			<HxInputNumber LabelType="LabelType.Floating" Label="Integer" @bind-Value="@context.IntegerValue" ParsingErrorMessage="Zadejte správně Integer." />
			<HxInputNumber LabelType="LabelType.Floating" Label="Integer (nullable)" @bind-Value="@context.NullableIntegerValue" ParsingErrorMessage="Zadejte správně Integer." />
			<HxInputNumber LabelType="LabelType.Floating" Label="Decimal" @bind-Value="@context.DecimalValue" ParsingErrorMessage="Zadejte správně Decimal." />
			<HxInputNumber LabelType="LabelType.Floating" Label="Decimal (nullable)" @bind-Value="@context.NullableDecimalValue" ParsingErrorMessage="Zadejte správně Decimal." />
			@*<HxInputDate LabelType="LabelType.Floating" Label="Date" @bind-Value="@context.DateValue" ParsingErrorMessage="Zadejte správně Date."/>
			<HxInputDate LabelType="LabelType.Floating" Label="Date (nullable)" @bind-Value="@context.NullableDateValue" ParsingErrorMessage="Zadejte správně Date." />
			<HxInputDateRange LabelType="LabelType.Floating" Label="DateRange" @bind-Value="@context.DateRange" ParsingErrorMessage="Zadejte správně DateRange." DateRanges="@(GetCustomDateRanges())" />

			<HxSelect LabelType="LabelType.Floating" Label="Select (TValueType: string)" @bind-Value="@context.CultureInfoSelectName" ValueSelector="@(item => item.DisplayName)" Data="@cultureInfos" TextSelector="@(item => item.DisplayName)" />
			<HxSelect LabelType="LabelType.Floating" Label="Select (TValueType: CultureInfo, small)" @bind-Value="@context.CultureInfoSelect" Data="@cultureInfos" TextSelector="@(item => item.DisplayName)" InputSize="InputSize.Small" />
			<HxSelect LabelType="LabelType.Floating" Label="Select (Data == null, small)" TItem="CultureInfo" TValue="CultureInfo" @bind-Value="@context.CultureInfoSelect" TextSelector="@(item => item.DisplayName)" NullDataText="No data available." InputSize="InputSize.Small" />*@

			<HxAutosuggest LabelType="LabelType.Floating" Label="Autosuggest (large)" @bind-Value="@context.CultureInfoAutosuggest" TextSelector="@(item => item.DisplayName)" DataProvider="CulturesAutosuggestDataProvider" InputSize="InputSize.Large">
				<HintTemplate>@context.CultureInfoAutosuggest?.DisplayName</HintTemplate>
			</HxAutosuggest>

			<HxSubmit Icon="@BootstrapIcon.Check" Color="ThemeColor.Primary">Submit</HxSubmit>
		</HxFilterForm>

	</div>
	<div class="card-footer">
		<p>Last captured click: @lastCapturedClick</p>
		<HxChipList Chips="@chips" OnChipRemoveClick="HandleChipRemoveClick" />
	</div>
</div>

@code
{
	private FormModel model = new FormModel();
	private HxFilterForm<FormModel> filterForm;
	private ChipItem[] chips;
	private DateTime? lastCapturedClick = null;
	private List<CultureInfo> cultureInfos = new List<CultureInfo> { CultureInfo.GetCultureInfo("cs-CZ"), CultureInfo.GetCultureInfo("en-US"), CultureInfo.GetCultureInfo("sk-SK"), CultureInfo.GetCultureInfo("es-ES") };

	private Task HandleCardClick()
	{
		lastCapturedClick = DateTime.Now;

		return Task.CompletedTask;
	}

	private Task<AutosuggestDataProviderResult<CultureInfo>> CulturesAutosuggestDataProvider(AutosuggestDataProviderRequest request)
	{
		return Task.FromResult(
		new AutosuggestDataProviderResult<CultureInfo>
		{
			Data = cultureInfos.Where(item => item.DisplayName.Contains(request.UserInput, StringComparison.CurrentCultureIgnoreCase)).ToList()
		});
	}

	private IEnumerable<DateRangeItem> GetCustomDateRanges()
	{
		yield return new DateRangeItem { Label = "Od příštího roku", DateRange = new DateTimeRange { StartDate = new DateTime(DateTime.Today.Year + 1, 1, 1) } };
		yield return new DateRangeItem { Label = "Od zítřka", DateRange = new DateTimeRange { StartDate = DateTime.Today.AddDays(1) } };
	}

	private void HandleChipUpdated(ChipItem[] chips)
	{
		this.chips = chips;
	}

	private async Task HandleChipRemoveClick(ChipItem chipItemToRemove)
	{
		await filterForm.RemoveChipAsync(chipItemToRemove);
	}


	public class FormModel : ICloneable
	{
		[Required]
		[MaxLength(50)]
		public string TextBasic { get; set; } = "Basic value";

		[Required]
		[MaxLength(50)]
		public string TextOnInput { get; set; }

		public string TextDisabled { get; set; }

		[Required]
		[MaxLength(50)]
		public string TextPassword { get; set; } = "Password";

		[Required]
		[MaxLength(50)]
		public string TextEmail { get; set; }

		[Required]
		public string TextLong { get; set; }

		public int IntegerValue { get; set; }

		public int? NullableIntegerValue { get; set; }

		public decimal DecimalValue { get; set; }

		public decimal? NullableDecimalValue { get; set; }

		public DateTime DateValue { get; set; } = DateTime.Today;

		public DateTime? NullableDateValue { get; set; }

		[Required]
		public string CultureInfoSelectName { get; set; }

		[Required]
		public CultureInfo CultureInfoSelect { get; set; }

		[Required]
		public CultureInfo CultureInfoAutosuggest { get; set; }

		[Required]
		public bool BoolCheckbox { get; set; } = true;

		[Required]
		public bool BoolSwitch { get; set; } = true;

		public Havit.Blazor.Components.Web.Bootstrap.DateTimeRange DateRange { get; set; }

		object ICloneable.Clone() => MemberwiseClone();
	}
}