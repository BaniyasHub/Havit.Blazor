@page "/InputsTest"
@using System.Globalization;

<h1>Inputs</h1>

<div class="card" @onclick="HandleCardClick">
	<div class="card-header">OnClick propagation test</div>
	<div class="card-body">

		<EditForm Model="@Model">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<HxInputText Label="Text (large)" InputSize="InputSize.Large" @bind-Value="@Model.Text">
				<HintTemplate>
					@Model.Text
				</HintTemplate>
			</HxInputText>

			<HxInputText Label="Text (oninput)" @bind-Value="@Model.Text" BindEvent="BindEvent.OnInput">
				<HintTemplate>
					@Model.Text
				</HintTemplate>
			</HxInputText>

			<HxInputText Label="Text (disabled)" Enabled="false" @bind-Value="@Model.Text" />
			<HxInputText Label="Text (password)" Type="InputType.Password" @bind-Value="@Model.Text" />

			<HxInputTextArea Label="TextArea" @bind-Value="@Model.Text" />

			<HxInputNumber Label="Integer" @bind-Value="@Model.IntegerValue" ParsingErrorMessage="Zadejte správně Integer." />
			<HxInputNumber Label="Integer (nullable)" @bind-Value="@Model.NullableIntegerValue" ParsingErrorMessage="Zadejte správně Integer.">
				<InputGroupBeforeTemplate>€</InputGroupBeforeTemplate>
				<InputGroupAfterTemplate>.00</InputGroupAfterTemplate>
			</HxInputNumber>
			<HxInputNumber Label="Decimal" @bind-Value="@Model.DecimalValue" ParsingErrorMessage="Zadejte správně Decimal." />
			<HxInputNumber Label="Decimal (nullable)" @bind-Value="@Model.NullableDecimalValue" ParsingErrorMessage="Zadejte správně Decimal." />
			<HxInputDate Label="Date" @bind-Value="@Model.DateValue" ParsingErrorMessage="Zadejte správně Date." />
			<HxInputDate Label="Date (nullable)" @bind-Value="@Model.NullableDateValue" ParsingErrorMessage="Zadejte správně Date." />

			<HxSelect Label="Select (TValueType: string)" @bind-Value="@Model.CultureInfoName" ValueSelector="@(item => item.DisplayName)" Items="@cultureInfos" TextSelector="@(item => item.DisplayName)" />
			<HxSelect Label="Select (TValueType: CultureInfo, small)" @bind-Value="@Model.CultureInfo" Items="@cultureInfos" TextSelector="@(item => item.DisplayName)" InputSize="InputSize.Small" />
			<HxSelect Label="Select (Items == null, small)" TItemType="CultureInfo" TValueType="CultureInfo" @bind-Value="@Model.CultureInfo" TextSelector="@(item => item.DisplayName)" NullItemsText="No data available." InputSize="InputSize.Small" />

			<HxAutosuggest Label="Autosuggest (large)" @bind-Value="@Model.CultureInfo" TextSelector="@(item => item.DisplayName)" DataProvider="CulturesAutosuggestDataProvider" InputSize="InputSize.Large">
				<HintTemplate>@Model.CultureInfo?.DisplayName</HintTemplate>
			</HxAutosuggest>

			<HxInputCheckBox Label="CheckBox" @bind-Value="@Model.BoolValue">
				<HintTemplate>@Model.BoolValue</HintTemplate>
			</HxInputCheckBox>

			<HxInputSwitch Label="Switch" @bind-Value="@Model.BoolValue"/>

			<HxSubmit Icon="@BootstrapIcon.Check" Color="ThemeColor.Primary">Submit</HxSubmit>
		</EditForm>

	</div>
	<div class="card-footer">
		Last captured click: @lastCapturedClick
	</div>
</div>
@code
{
	private List<CultureInfo> cultureInfos = new List<CultureInfo> { CultureInfo.GetCultureInfo("cs-CZ"), CultureInfo.GetCultureInfo("en-US"), CultureInfo.GetCultureInfo("sk-SK"), CultureInfo.GetCultureInfo("es-ES") };
	private DateTime? lastCapturedClick = null;

	private Task HandleCardClick()
	{
		lastCapturedClick = DateTime.Now;

		return Task.CompletedTask;
	}

	private Task<AutosuggestDataProviderResult<CultureInfo>> CulturesAutosuggestDataProvider(AutosuggestDataProviderRequest request)
	{
		return Task.FromResult(
		new AutosuggestDataProviderResult<CultureInfo>
		{
			Items = cultureInfos.Where(item => item.DisplayName.Contains(request.UserInput, StringComparison.CurrentCultureIgnoreCase)).ToList()
		});
	}
}