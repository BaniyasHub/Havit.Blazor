@page "/InputsTest"
@using System.Globalization;

<h1>Inputs</h1>

<div class="card" @onclick="HandleCardClick">
	<div class="card-header">OnClick propagation test</div>
	<div class="card-body">

		<HxFilterForm @ref="filterForm" @bind-Model="@model" OnChipsUpdated="HandleChipUpdated">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<HxInputText Label="Text (large)" InputSize="InputSize.Large" @bind-Value="@context.Text" Hint="@context.Text" />

			<HxInputText Label="Text (oninput)" @bind-Value="@context.Text" BindEvent="BindEvent.OnInput">
				<HintTemplate>
					Hint: @context.Text
				</HintTemplate>
			</HxInputText>

			<HxInputText Label="Text (disabled)" Enabled="false" @bind-Value="@context.Text" />
			<HxInputText Label="Text (password)" Type="InputType.Password" @bind-Value="@context.Text" />

			<HxInputTextArea Label="TextArea" @bind-Value="@context.Text" />

			<HxInputNumber Label="Integer" @bind-Value="@context.IntegerValue" ParsingErrorMessage="Zadejte správně Integer." />
			<HxInputNumber Label="Integer (nullable)" @bind-Value="@context.NullableIntegerValue" InputGroupStart="€" InputGroupEnd=".00" ParsingErrorMessage="Zadejte správně Integer." />
			<HxInputNumber Label="Decimal" @bind-Value="@context.DecimalValue" ParsingErrorMessage="Zadejte správně Decimal." />
			<HxInputNumber Label="Decimal (nullable)" @bind-Value="@context.NullableDecimalValue" ParsingErrorMessage="Zadejte správně Decimal." />
			<HxInputDate Label="Date" @bind-Value="@context.DateValue" ParsingErrorMessage="Zadejte správně Date."/>
			<HxInputDate Label="Date (nullable)" @bind-Value="@context.NullableDateValue" ParsingErrorMessage="Zadejte správně Date." Placeholder="Zadejte datum... (Placeholder)" />
			<HxInputDateRange Label="DateRange" @bind-Value="@context.DateRange" ParsingErrorMessage="Zadejte správně DateRange." DateRanges="@(GetCustomDateRanges())" />

			<HxSelect Label="Select (TValueType: string)" @bind-Value="@context.CultureInfoName" ValueSelector="@(item => item.DisplayName)" Data="@cultureInfos" TextSelector="@(item => item.DisplayName)" />
			<HxSelect Label="Select (TValueType: CultureInfo, small)" @bind-Value="@context.CultureInfo" Data="@cultureInfos" TextSelector="@(item => item.DisplayName)" InputSize="InputSize.Small" />
			<HxSelect Label="Select (Data == null, small)" TItem="CultureInfo" TValue="CultureInfo" @bind-Value="@context.CultureInfo" TextSelector="@(item => item.DisplayName)" NullDataText="No data available." InputSize="InputSize.Small" />

			<HxAutosuggest Label="Autosuggest (large)" @bind-Value="@context.CultureInfo" TextSelector="@(item => item.DisplayName)" DataProvider="CulturesAutosuggestDataProvider" InputSize="InputSize.Large">
				<HintTemplate>@context.CultureInfo?.DisplayName</HintTemplate>
			</HxAutosuggest>

			<HxInputCheckbox Label="Checkbox" @bind-Value="@context.BoolValue" Hint="@context.BoolValue.ToString()" />

			<HxInputSwitch Label="Switch" @bind-Value="@context.BoolValue" />

			<HxSubmit Icon="@BootstrapIcon.Check" Color="ThemeColor.Primary">Submit</HxSubmit>
		</HxFilterForm>

	</div>
	<div class="card-footer">
		<p>Last captured click: @lastCapturedClick</p>
		<HxChipList Chips="@chips" OnChipRemoveClick="HandleChipRemoveClick" />
	</div>
</div>

@code
{
	private HxFilterForm<FormModel> filterForm;
	private ChipItem[] chips;
	private DateTime? lastCapturedClick = null;
	private List<CultureInfo> cultureInfos = new List<CultureInfo> { CultureInfo.GetCultureInfo("cs-CZ"), CultureInfo.GetCultureInfo("en-US"), CultureInfo.GetCultureInfo("sk-SK"), CultureInfo.GetCultureInfo("es-ES") };

	private Task HandleCardClick()
	{
		lastCapturedClick = DateTime.Now;

		return Task.CompletedTask;
	}

	private Task<AutosuggestDataProviderResult<CultureInfo>> CulturesAutosuggestDataProvider(AutosuggestDataProviderRequest request)
	{
		return Task.FromResult(
		new AutosuggestDataProviderResult<CultureInfo>
		{
			Data = cultureInfos.Where(item => item.DisplayName.Contains(request.UserInput, StringComparison.CurrentCultureIgnoreCase)).ToList()
		});
	}

	private IEnumerable<DateRangeItem> GetCustomDateRanges()
	{
		yield return new DateRangeItem { Label = "Od příštího roku", DateRange = new DateTimeRange { StartDate = new DateTime(DateTime.Today.Year + 1, 1, 1) } };
		yield return new DateRangeItem { Label = "Od zítřka", DateRange = new DateTimeRange { StartDate = DateTime.Today.AddDays(1) } };
	}

	private void HandleChipUpdated(ChipItem[] chips)
	{
		this.chips = chips;
	}

	private async Task HandleChipRemoveClick(ChipItem chipItemToRemove)
	{
		await filterForm.RemoveChipAsync(chipItemToRemove);
	}
}