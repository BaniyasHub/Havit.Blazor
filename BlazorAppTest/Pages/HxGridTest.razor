@page "/HxGridTest"
@using System.Globalization

<h1>HxGrid</h1>

<h2>Client paging, auto sorting</h2>
<HxGrid DataProvider="@ClientCultureInfosDataProvider" @bind-SelectedDataItem="@clientSideCurrentCultureInfo" PageSize="@PageSize">
	<Columns>
		<HxGridColumn TItem="CultureInfo" HeaderText="Display Name" ItemTextSelector="@(item => item.DisplayName)" SortKeySelector="@(item => item.DisplayName)" IsDefaultSortColumn="true" />
		<HxGridColumn TItem="CultureInfo" HeaderText="Name" ItemTextSelector="@(item => item.Name)" SortKeySelector="@(item => item.Name)" ItemCssClassSelector="@(item => item.Name.Contains('Z') ? "text-end" : null)" />
		<HxGridColumn TItem="CultureInfo" HeaderText="Link">
			<ItemTemplate>
				<a href="https://www.havit.cz" @onclick:stopPropagation>link to a page</a> @* TODO HxLink, který bude mít default stopPropagation ??? *@
				<HxButton Text="Go" Color="ThemeColor.Secondary" Outlined="true" />
			</ItemTemplate>
		</HxGridColumn>
	</Columns>
	<ContextMenu Context="item">
		<HxContextMenu>
			<HxContextMenuItem Text="Nastavit jako výchozí" OnClick="async () => await AlarmClicked(item)" />
			<HxContextMenuItem ConfirmationQuestion="Jako fakt?" OnClick="async () => await AlarmClicked(item)">
				<HxIcon Icon="BootstrapIcon.Alarm" /> Bacha na to!
			</HxContextMenuItem>
		</HxContextMenu>
	</ContextMenu>
</HxGrid>
<p>Current CultureInfo: @clientSideCurrentCultureInfo?.DisplayName</p>
<p>Clicked context menu item: @clickedItem?.DisplayName</p>

<h2>Server paging, server sorting</h2>
<HxGrid TItem="CultureInfo" @ref="serverSideGrid" @bind-SelectedDataItem="@serverSideCurrentCultureInfo" DataProvider="@ServerCultureInfosDataProvider" PageSize="@PageSize" MultiSelectionEnabled="true" SelectionEnabled="false">
	<Columns>
		<HxGridColumn TItem="CultureInfo" HeaderText="Display Name" ItemTextSelector="@(item => item.DisplayName)" SortString="@nameof(CultureInfo.DisplayName)" IsDefaultSortColumn="true" FooterText="This is a footer" />
		<HxGridColumn TItem="CultureInfo" HeaderText="Name" ItemTextSelector="@(item => item.Name)" SortString="@nameof(CultureInfo.Name)" />
	</Columns>
</HxGrid>
<p>Current CultureInfo: @serverSideCurrentCultureInfo?.DisplayName</p>

<h2>Empty data with @nameof(HxGrid<object>.EmptyDataTemplate)</h2>
<HxGrid TItem="CultureInfo" DataProvider="@EmptyCultureInfosDataProvider">
	<Columns>
		<HxGridColumn TItem="CultureInfo" HeaderText="Display Name" ItemTextSelector="@(item => item.DisplayName)" FooterText="This is a footer" />
		<HxGridColumn TItem="CultureInfo" HeaderText="Name" ItemTextSelector="@(item => item.Name)" />
	</Columns>
	<EmptyDataTemplate>
		<HxButton Skin="ButtonSkins.New" />
	</EmptyDataTemplate>
</HxGrid>

@code {
	private const int PageSize = 10;

	private HxGrid<CultureInfo>
	serverSideGrid;

	private int skip = 0;

	// LOCAL
	private CultureInfo clientSideCurrentCultureInfo = null;

	// SERVER SIDE (simulation)
	private CultureInfo serverSideCurrentCultureInfo = null;
	private CultureInfo clickedItem = null;

	protected override Task OnInitializedAsync()
	{
		HxProgressOverlay.DefaultDelay = 0; // TEST

		return base.OnInitializedAsync();
	}

	private List<CultureInfo> GetCultureInfos()
	{
		return CultureInfo.GetCultures(CultureTypes.SpecificCultures).OrderBy(item => item.EnglishName /* only for skip! */).Skip(skip).ToList();
	}

	private async Task<GridDataProviderResult<CultureInfo>> ClientCultureInfosDataProvider(GridDataProviderRequest<CultureInfo> request)
	{
		await Task.Delay(3000); // simulate server call

		var cultures = GetCultureInfos();
		return request.ApplyTo(cultures);
	}

	private async Task<GridDataProviderResult<CultureInfo>> ServerCultureInfosDataProvider(GridDataProviderRequest<CultureInfo> request)
	{
		await Task.Delay(3000); // simulate server call

		var cultures = GetCultureInfos();
		cultures.Sort(request.Sorting.ToGenericPropertyComparer());

		return new GridDataProviderResult<CultureInfo>()
		{
			TotalCount = cultures.Count(),
			Data = cultures
				.Skip(request.PageIndex * PageSize)
				.Take(PageSize)
				.ToList()
		};
	}

	private async Task<GridDataProviderResult<CultureInfo>> EmptyCultureInfosDataProvider(GridDataProviderRequest<CultureInfo> request)
	{
		await Task.Delay(3000);
		return new GridDataProviderResult<CultureInfo>
		{
			Data = new List<CultureInfo>(),
			TotalCount = 0
		};
	}


	private Task AlarmClicked(System.Globalization.CultureInfo item)
	{
		clickedItem = item;
		return Task.CompletedTask;
	}
}
