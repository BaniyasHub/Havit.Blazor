@using Havit.Linq
<HxListLayout Title="Title"
			  @bind-FilterModel="filterModel"
			  @bind-FilterModel:after="RefreshDataAsync"
			  NamedViews="namedViews"
			  @bind-SelectedNamedView="selectedNamedView"
			  TitleFromNamedView="titleFromNamedView">
	<FilterTemplate Context="filterContext">
		<HxInputNumber Label="MinimumItemId" @bind-Value="filterContext.MinimumLCID" />
		<HxInputNumber Label="MaximumItemId" @bind-Value="filterContext.MaximumLCID" />
	</FilterTemplate>
	<CommandsTemplate>
		<HxButton Text="New item" Color="ThemeColor.Primary" Icon="BootstrapIcon.PlusLg" OnClick="NewItemClicked" />
	</CommandsTemplate>
	<DataTemplate>
		<HxGrid @ref="gridComponent"
				ContentNavigationMode="GridContentNavigationMode.Pagination"
				Responsive="true"
				PageSize="10"
				DataProvider="LoadDataItems"
				@bind-SelectedDataItem="currentItem"
				@bind-SelectedDataItem:after="HandleSelectedDataItemChanged">
			<Columns>
				<HxGridColumn HeaderText="LCID" ItemTextSelector="@(item => item.LCID.ToString())" SortKeySelector="@(item => item.LCID)" IsDefaultSortColumn="true" />
				<HxGridColumn HeaderText="DisplayName" ItemTextSelector="@(item => item.DisplayName)" SortKeySelector="@(item => item.DisplayName)" />
				<HxGridColumn HeaderText="Name" ItemTextSelector="@(item => item.Name)" SortKeySelector="@(item => item.Name)" />
				<HxGridColumn HeaderText="EnglishName" ItemTextSelector="@(item => item.EnglishName)" SortKeySelector="@(item => item.EnglishName)" />
				<HxContextMenuGridColumn Context="item">
					<HxContextMenu>
						<HxContextMenuItem Text="Delete" OnClick="async () => await DeleteItemClicked(item)" ConfirmationQuestion="@($"Are you sure you want to delete {item.Name}?")" />
					</HxContextMenu>
				</HxContextMenuGridColumn>
			</Columns>
		</HxGrid>
	</DataTemplate>
	<DetailTemplate>
		Edit: @currentItem?.LCID
	</DetailTemplate>
</HxListLayout>

<HxSwitch @bind-Value="titleFromNamedView" Text="TitleFromNamedView" />

@code {
	[Inject] protected NavigationManager NavigationManager { get; set; }

	private EditableCultureInfo currentItem;
	private FilterModelDto filterModel = new FilterModelDto();
	private HxGrid<EditableCultureInfo> gridComponent;
	private NamedView<FilterModelDto> selectedNamedView;
	private bool titleFromNamedView = true;

	private IEnumerable<NamedView<FilterModelDto>> namedViews;

	private List<EditableCultureInfo> localEditableCultureInfos = CultureInfo.GetCultures(CultureTypes.AllCultures).Select(c => new EditableCultureInfo()
		{
			LCID = c.LCID,
			DisplayName = c.DisplayName,
			Name = c.Name,
			EnglishName = c.EnglishName
		}).ToList();

	protected override void OnInitialized()
	{
		namedViews = new List<NamedView<FilterModelDto>>()
		{
			new NamedView<FilterModelDto>("Default view", () => new FilterModelDto()), // resets the filter
			new NamedView<FilterModelDto>("Minimum = 1", () => filterModel with { MinimumLCID = 1 } ), // keep filter presets not affected by the view
			new NamedView<FilterModelDto>("Minimum = 50", () => filterModel with { MinimumLCID = 50 }),
			new NamedView<FilterModelDto>("Minimum = 100", () => filterModel with { MinimumLCID = 100 })
		};

		selectedNamedView = namedViews.First(); // set first view selected on initial load
	}

	private Task<GridDataProviderResult<EditableCultureInfo>> LoadDataItems(GridDataProviderRequest<EditableCultureInfo> request)
	{
		IEnumerable<EditableCultureInfo> result = localEditableCultureInfos
			.WhereIf(filterModel.MinimumLCID.HasValue, i => i.LCID >= filterModel.MinimumLCID)
			.WhereIf(filterModel.MaximumLCID.HasValue, i => i.LCID <= filterModel.MaximumLCID)
			.ToList();

		return Task.FromResult(request.ApplyTo(result));
	}

	private async Task RefreshDataAsync()
	{
		await gridComponent.RefreshDataAsync();
	}

	private async Task DeleteItemClicked(EditableCultureInfo editableCultureInfo)
	{
		localEditableCultureInfos.Remove(editableCultureInfo);
		await gridComponent.RefreshDataAsync();
	}

	private Task HandleSelectedDataItemChanged()
	{
		// await dataItemEditComponent.ShowAsync();
		return Task.CompletedTask;
	}

	private Task NewItemClicked()
	{
		currentItem = new();
		// await dataItemEditComponent.ShowAsync();
		return Task.CompletedTask;
	}

	public record FilterModelDto
	{
		public int? MinimumLCID { get; set; }
		public int? MaximumLCID { get; set; }
	}

	private record EditableCultureInfo
	{
		public int LCID { get; set; }
		public string DisplayName { get; set; }
		public string Name { get; set; }
		public string EnglishName { get; set; }
	}
}