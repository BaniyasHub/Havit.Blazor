@page "/HxGridDemo"
@using System.Globalization

<h1>HxGrid</h1>

<h2>Client paging, auto sorting</h2>
<HxGrid Data="@localCultureInfos" @bind-SelectedDataItem="@currentLocalCultureInfo" PageSize="@PageSize" SelectionMode="GridSelectionMode.Select">
	<Columns>
		<HxGridColumn TItemType="CultureInfo" HeaderText="Display Name" ItemTextSelector="@(item => item.DisplayName)" SortKeySelector="@(item => item.DisplayName)" IsDefaultSortColumn="true" />
		<HxGridColumn TItemType="CultureInfo" HeaderText="Name" ItemTextSelector="@(item => item.Name)" SortKeySelector="@(item => item.Name)" ItemCssClassSelector="@(item => item.Name.Contains('Z') ? "text-end" : null)" />
		<HxGridColumn TItemType="CultureInfo" HeaderText="Link">
			<ItemTemplate>
				<a href="https://www.havit.cz">link to a page</a>
				<HxButton Text="Go" />
			</ItemTemplate>
		</HxGridColumn>
	</Columns>
	<ContextMenu Context="item">
		<HxContextMenu>
			<HxContextMenuItem Title="Nastavit jako výchozí" />
			<HxContextMenuItem ConfirmationQuestion="Jako fakt?" OnItemClick="async () => await AlarmClicked(item)">
				<HxIcon Icon="BootstrapIcon.Alarm" /> Bacha na to!
			</HxContextMenuItem>
		</HxContextMenu>
	</ContextMenu>
</HxGrid>
<p>Current CultureInfo: @currentLocalCultureInfo?.DisplayName</p>
<p>Clicked context menu item: @clickedItem?.DisplayName</p>

<h2>Server paging, server sorting</h2>
<HxGrid TItemType="CultureInfo" @bind-SelectedDataItem="@currentServerCultureInfo" DataProvider="@ServerCultureInfosDataProvider" PageSize="@PageSize" SelectionMode="GridSelectionMode.MultiSelect">
	<Columns>
		<HxGridColumn TItemType="CultureInfo" HeaderText="Display Name" ItemTextSelector="@(item => item.DisplayName)" SortString="@nameof(CultureInfo.DisplayName)" IsDefaultSortColumn="true" />
		<HxGridColumn TItemType="CultureInfo" HeaderText="Name" ItemTextSelector="@(item => item.Name)" SortString="@nameof(CultureInfo.Name)" />
	</Columns>
</HxGrid>
<p>Current CultureInfo: @currentServerCultureInfo?.DisplayName</p>

@code {
	private const int PageSize = 10;

	// LOCAL
	private List<CultureInfo> localCultureInfos = null;
	private CultureInfo currentLocalCultureInfo = null;

	// SERVER SIDE (simulation)
	private CultureInfo currentServerCultureInfo = null;
	private CultureInfo clickedItem = null;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		await Task.Delay(100); // simulate server call (data download)
		localCultureInfos = CultureInfo.GetCultures(CultureTypes.SpecificCultures).ToList();
	}

	private async ValueTask<GridDataProviderResult<CultureInfo>> ServerCultureInfosDataProvider(GridDataProviderRequest<CultureInfo> request)
	{
		await Task.Delay(300); // simulate server call

		var cultures = CultureInfo.GetCultures(CultureTypes.SpecificCultures).ToList();
		cultures.Sort(request.Sorting.ToGenericPropertyComparer());

		return new GridDataProviderResult<CultureInfo>()
		{
			DataItemsTotalCount = cultures.Count(),
			Data = cultures
			.Skip(request.PageIndex * PageSize)
			.Take(PageSize)
			.ToList()
		};
	}

	private Task AlarmClicked(System.Globalization.CultureInfo item)
	{
		clickedItem = item;
		return Task.CompletedTask;
	}
}